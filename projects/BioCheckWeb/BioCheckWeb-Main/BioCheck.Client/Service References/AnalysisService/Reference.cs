//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace BioCheck.AnalysisService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisInputDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class AnalysisInputDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool EnableLoggingField;
        
        private string ModelNameField;
        
        private byte[] ZippedXmlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableLogging {
            get {
                return this.EnableLoggingField;
            }
            set {
                if ((this.EnableLoggingField.Equals(value) != true)) {
                    this.EnableLoggingField = value;
                    this.RaisePropertyChanged("EnableLogging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedXml {
            get {
                return this.ZippedXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedXmlField, value) != true)) {
                    this.ZippedXmlField = value;
                    this.RaisePropertyChanged("ZippedXml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisOutputDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class AnalysisOutputDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ErrorMessagesField;
        
        private string StatusField;
        
        private double TimeField;
        
        private byte[] ZippedLogField;
        
        private byte[] ZippedXmlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedLog {
            get {
                return this.ZippedLogField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedLogField, value) != true)) {
                    this.ZippedLogField = value;
                    this.RaisePropertyChanged("ZippedLog");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedXml {
            get {
                return this.ZippedXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedXmlField, value) != true)) {
                    this.ZippedXmlField = value;
                    this.RaisePropertyChanged("ZippedXml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FurtherTestingOutputDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class FurtherTestingOutputDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.CounterExampleOutput> CounterExamplesField;
        
        private string ErrorField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ErrorMessagesField;
        
        private byte[] ZippedLogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.CounterExampleOutput> CounterExamples {
            get {
                return this.CounterExamplesField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterExamplesField, value) != true)) {
                    this.CounterExamplesField = value;
                    this.RaisePropertyChanged("CounterExamples");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedLog {
            get {
                return this.ZippedLogField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedLogField, value) != true)) {
                    this.ZippedLogField = value;
                    this.RaisePropertyChanged("ZippedLog");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CounterExampleOutput", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class CounterExampleOutput : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.BifurcatingVariableOutput> BifurcatingVariablesField;
        
        private string CounterExampleTypeField;
        
        private string ErrorField;
        
        private System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.OscillatingVariableOutput> OscillatingVariablesField;
        
        private string StatusField;
        
        private byte[] ZippedXmlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.BifurcatingVariableOutput> BifurcatingVariables {
            get {
                return this.BifurcatingVariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.BifurcatingVariablesField, value) != true)) {
                    this.BifurcatingVariablesField = value;
                    this.RaisePropertyChanged("BifurcatingVariables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CounterExampleType {
            get {
                return this.CounterExampleTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CounterExampleTypeField, value) != true)) {
                    this.CounterExampleTypeField = value;
                    this.RaisePropertyChanged("CounterExampleType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.OscillatingVariableOutput> OscillatingVariables {
            get {
                return this.OscillatingVariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.OscillatingVariablesField, value) != true)) {
                    this.OscillatingVariablesField = value;
                    this.RaisePropertyChanged("OscillatingVariables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedXml {
            get {
                return this.ZippedXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedXmlField, value) != true)) {
                    this.ZippedXmlField = value;
                    this.RaisePropertyChanged("ZippedXml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BifurcatingVariableOutput", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class BifurcatingVariableOutput : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CalculatedBoundField;
        
        private int Fix1Field;
        
        private int Fix2Field;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatedBound {
            get {
                return this.CalculatedBoundField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatedBoundField, value) != true)) {
                    this.CalculatedBoundField = value;
                    this.RaisePropertyChanged("CalculatedBound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fix1 {
            get {
                return this.Fix1Field;
            }
            set {
                if ((this.Fix1Field.Equals(value) != true)) {
                    this.Fix1Field = value;
                    this.RaisePropertyChanged("Fix1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Fix2 {
            get {
                return this.Fix2Field;
            }
            set {
                if ((this.Fix2Field.Equals(value) != true)) {
                    this.Fix2Field = value;
                    this.RaisePropertyChanged("Fix2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OscillatingVariableOutput", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class OscillatingVariableOutput : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CalculatedBoundField;
        
        private int IdField;
        
        private string NameField;
        
        private string OscillationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CalculatedBound {
            get {
                return this.CalculatedBoundField;
            }
            set {
                if ((object.ReferenceEquals(this.CalculatedBoundField, value) != true)) {
                    this.CalculatedBoundField = value;
                    this.RaisePropertyChanged("CalculatedBound");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Oscillation {
            get {
                return this.OscillationField;
            }
            set {
                if ((object.ReferenceEquals(this.OscillationField, value) != true)) {
                    this.OscillationField = value;
                    this.RaisePropertyChanged("Oscillation");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimulationInputDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class SimulationInputDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool EnableLoggingField;
        
        private string ModelNameField;
        
        private System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.SimVariableDTO> VariablesField;
        
        private byte[] ZippedXmlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnableLogging {
            get {
                return this.EnableLoggingField;
            }
            set {
                if ((this.EnableLoggingField.Equals(value) != true)) {
                    this.EnableLoggingField = value;
                    this.RaisePropertyChanged("EnableLogging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModelName {
            get {
                return this.ModelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModelNameField, value) != true)) {
                    this.ModelNameField = value;
                    this.RaisePropertyChanged("ModelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.SimVariableDTO> Variables {
            get {
                return this.VariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.VariablesField, value) != true)) {
                    this.VariablesField = value;
                    this.RaisePropertyChanged("Variables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedXml {
            get {
                return this.ZippedXmlField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedXmlField, value) != true)) {
                    this.ZippedXmlField = value;
                    this.RaisePropertyChanged("ZippedXml");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimVariableDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class SimVariableDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private int ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimulationOutputDTO", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class SimulationOutputDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorField;
        
        private System.Collections.ObjectModel.ObservableCollection<string> ErrorMessagesField;
        
        private System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.SimVariableDTO> VariablesField;
        
        private byte[] ZippedLogField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<string> ErrorMessages {
            get {
                return this.ErrorMessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessagesField, value) != true)) {
                    this.ErrorMessagesField = value;
                    this.RaisePropertyChanged("ErrorMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<BioCheck.AnalysisService.SimVariableDTO> Variables {
            get {
                return this.VariablesField;
            }
            set {
                if ((object.ReferenceEquals(this.VariablesField, value) != true)) {
                    this.VariablesField = value;
                    this.RaisePropertyChanged("Variables");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] ZippedLog {
            get {
                return this.ZippedLogField;
            }
            set {
                if ((object.ReferenceEquals(this.ZippedLogField, value) != true)) {
                    this.ZippedLogField = value;
                    this.RaisePropertyChanged("ZippedLog");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValidationOutput", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Analysis")]
    public partial class ValidationOutput : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ColumnField;
        
        private string DetailsField;
        
        private bool IsValidField;
        
        private int LineField;
        
        private string MessageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Column {
            get {
                return this.ColumnField;
            }
            set {
                if ((this.ColumnField.Equals(value) != true)) {
                    this.ColumnField = value;
                    this.RaisePropertyChanged("Column");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Details {
            get {
                return this.DetailsField;
            }
            set {
                if ((object.ReferenceEquals(this.DetailsField, value) != true)) {
                    this.DetailsField = value;
                    this.RaisePropertyChanged("Details");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Line {
            get {
                return this.LineField;
            }
            set {
                if ((this.LineField.Equals(value) != true)) {
                    this.LineField = value;
                    this.RaisePropertyChanged("Line");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="AnalysisService.AnalysisService")]
    public interface AnalysisService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:AnalysisService/Analyze", ReplyAction="urn:AnalysisService/AnalyzeResponse")]
        System.IAsyncResult BeginAnalyze(BioCheck.AnalysisService.AnalysisInputDTO input, System.AsyncCallback callback, object asyncState);
        
        BioCheck.AnalysisService.AnalysisOutputDTO EndAnalyze(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:AnalysisService/FindCounterExamples", ReplyAction="urn:AnalysisService/FindCounterExamplesResponse")]
        System.IAsyncResult BeginFindCounterExamples(BioCheck.AnalysisService.AnalysisInputDTO input, BioCheck.AnalysisService.AnalysisOutputDTO output, System.AsyncCallback callback, object asyncState);
        
        BioCheck.AnalysisService.FurtherTestingOutputDTO EndFindCounterExamples(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:AnalysisService/Simulate", ReplyAction="urn:AnalysisService/SimulateResponse")]
        System.IAsyncResult BeginSimulate(BioCheck.AnalysisService.SimulationInputDTO input, System.AsyncCallback callback, object asyncState);
        
        BioCheck.AnalysisService.SimulationOutputDTO EndSimulate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:AnalysisService/Validate", ReplyAction="urn:AnalysisService/ValidateResponse")]
        System.IAsyncResult BeginValidate(string formmula, System.AsyncCallback callback, object asyncState);
        
        BioCheck.AnalysisService.ValidationOutput EndValidate(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface AnalysisServiceChannel : BioCheck.AnalysisService.AnalysisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnalyzeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AnalyzeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BioCheck.AnalysisService.AnalysisOutputDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BioCheck.AnalysisService.AnalysisOutputDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FindCounterExamplesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FindCounterExamplesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BioCheck.AnalysisService.FurtherTestingOutputDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BioCheck.AnalysisService.FurtherTestingOutputDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SimulateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SimulateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BioCheck.AnalysisService.SimulationOutputDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BioCheck.AnalysisService.SimulationOutputDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BioCheck.AnalysisService.ValidationOutput Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BioCheck.AnalysisService.ValidationOutput)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnalysisServiceClient : System.ServiceModel.ClientBase<BioCheck.AnalysisService.AnalysisService>, BioCheck.AnalysisService.AnalysisService {
        
        private BeginOperationDelegate onBeginAnalyzeDelegate;
        
        private EndOperationDelegate onEndAnalyzeDelegate;
        
        private System.Threading.SendOrPostCallback onAnalyzeCompletedDelegate;
        
        private BeginOperationDelegate onBeginFindCounterExamplesDelegate;
        
        private EndOperationDelegate onEndFindCounterExamplesDelegate;
        
        private System.Threading.SendOrPostCallback onFindCounterExamplesCompletedDelegate;
        
        private BeginOperationDelegate onBeginSimulateDelegate;
        
        private EndOperationDelegate onEndSimulateDelegate;
        
        private System.Threading.SendOrPostCallback onSimulateCompletedDelegate;
        
        private BeginOperationDelegate onBeginValidateDelegate;
        
        private EndOperationDelegate onEndValidateDelegate;
        
        private System.Threading.SendOrPostCallback onValidateCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public AnalysisServiceClient() {
        }
        
        public AnalysisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnalysisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnalysisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnalysisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AnalyzeCompletedEventArgs> AnalyzeCompleted;
        
        public event System.EventHandler<FindCounterExamplesCompletedEventArgs> FindCounterExamplesCompleted;
        
        public event System.EventHandler<SimulateCompletedEventArgs> SimulateCompleted;
        
        public event System.EventHandler<ValidateCompletedEventArgs> ValidateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.AnalysisService.AnalysisService.BeginAnalyze(BioCheck.AnalysisService.AnalysisInputDTO input, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAnalyze(input, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BioCheck.AnalysisService.AnalysisOutputDTO BioCheck.AnalysisService.AnalysisService.EndAnalyze(System.IAsyncResult result) {
            return base.Channel.EndAnalyze(result);
        }
        
        private System.IAsyncResult OnBeginAnalyze(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BioCheck.AnalysisService.AnalysisInputDTO input = ((BioCheck.AnalysisService.AnalysisInputDTO)(inValues[0]));
            return ((BioCheck.AnalysisService.AnalysisService)(this)).BeginAnalyze(input, callback, asyncState);
        }
        
        private object[] OnEndAnalyze(System.IAsyncResult result) {
            BioCheck.AnalysisService.AnalysisOutputDTO retVal = ((BioCheck.AnalysisService.AnalysisService)(this)).EndAnalyze(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAnalyzeCompleted(object state) {
            if ((this.AnalyzeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AnalyzeCompleted(this, new AnalyzeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AnalyzeAsync(BioCheck.AnalysisService.AnalysisInputDTO input) {
            this.AnalyzeAsync(input, null);
        }
        
        public void AnalyzeAsync(BioCheck.AnalysisService.AnalysisInputDTO input, object userState) {
            if ((this.onBeginAnalyzeDelegate == null)) {
                this.onBeginAnalyzeDelegate = new BeginOperationDelegate(this.OnBeginAnalyze);
            }
            if ((this.onEndAnalyzeDelegate == null)) {
                this.onEndAnalyzeDelegate = new EndOperationDelegate(this.OnEndAnalyze);
            }
            if ((this.onAnalyzeCompletedDelegate == null)) {
                this.onAnalyzeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAnalyzeCompleted);
            }
            base.InvokeAsync(this.onBeginAnalyzeDelegate, new object[] {
                        input}, this.onEndAnalyzeDelegate, this.onAnalyzeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.AnalysisService.AnalysisService.BeginFindCounterExamples(BioCheck.AnalysisService.AnalysisInputDTO input, BioCheck.AnalysisService.AnalysisOutputDTO output, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFindCounterExamples(input, output, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BioCheck.AnalysisService.FurtherTestingOutputDTO BioCheck.AnalysisService.AnalysisService.EndFindCounterExamples(System.IAsyncResult result) {
            return base.Channel.EndFindCounterExamples(result);
        }
        
        private System.IAsyncResult OnBeginFindCounterExamples(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BioCheck.AnalysisService.AnalysisInputDTO input = ((BioCheck.AnalysisService.AnalysisInputDTO)(inValues[0]));
            BioCheck.AnalysisService.AnalysisOutputDTO output = ((BioCheck.AnalysisService.AnalysisOutputDTO)(inValues[1]));
            return ((BioCheck.AnalysisService.AnalysisService)(this)).BeginFindCounterExamples(input, output, callback, asyncState);
        }
        
        private object[] OnEndFindCounterExamples(System.IAsyncResult result) {
            BioCheck.AnalysisService.FurtherTestingOutputDTO retVal = ((BioCheck.AnalysisService.AnalysisService)(this)).EndFindCounterExamples(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFindCounterExamplesCompleted(object state) {
            if ((this.FindCounterExamplesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FindCounterExamplesCompleted(this, new FindCounterExamplesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FindCounterExamplesAsync(BioCheck.AnalysisService.AnalysisInputDTO input, BioCheck.AnalysisService.AnalysisOutputDTO output) {
            this.FindCounterExamplesAsync(input, output, null);
        }
        
        public void FindCounterExamplesAsync(BioCheck.AnalysisService.AnalysisInputDTO input, BioCheck.AnalysisService.AnalysisOutputDTO output, object userState) {
            if ((this.onBeginFindCounterExamplesDelegate == null)) {
                this.onBeginFindCounterExamplesDelegate = new BeginOperationDelegate(this.OnBeginFindCounterExamples);
            }
            if ((this.onEndFindCounterExamplesDelegate == null)) {
                this.onEndFindCounterExamplesDelegate = new EndOperationDelegate(this.OnEndFindCounterExamples);
            }
            if ((this.onFindCounterExamplesCompletedDelegate == null)) {
                this.onFindCounterExamplesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFindCounterExamplesCompleted);
            }
            base.InvokeAsync(this.onBeginFindCounterExamplesDelegate, new object[] {
                        input,
                        output}, this.onEndFindCounterExamplesDelegate, this.onFindCounterExamplesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.AnalysisService.AnalysisService.BeginSimulate(BioCheck.AnalysisService.SimulationInputDTO input, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSimulate(input, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BioCheck.AnalysisService.SimulationOutputDTO BioCheck.AnalysisService.AnalysisService.EndSimulate(System.IAsyncResult result) {
            return base.Channel.EndSimulate(result);
        }
        
        private System.IAsyncResult OnBeginSimulate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BioCheck.AnalysisService.SimulationInputDTO input = ((BioCheck.AnalysisService.SimulationInputDTO)(inValues[0]));
            return ((BioCheck.AnalysisService.AnalysisService)(this)).BeginSimulate(input, callback, asyncState);
        }
        
        private object[] OnEndSimulate(System.IAsyncResult result) {
            BioCheck.AnalysisService.SimulationOutputDTO retVal = ((BioCheck.AnalysisService.AnalysisService)(this)).EndSimulate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSimulateCompleted(object state) {
            if ((this.SimulateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SimulateCompleted(this, new SimulateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SimulateAsync(BioCheck.AnalysisService.SimulationInputDTO input) {
            this.SimulateAsync(input, null);
        }
        
        public void SimulateAsync(BioCheck.AnalysisService.SimulationInputDTO input, object userState) {
            if ((this.onBeginSimulateDelegate == null)) {
                this.onBeginSimulateDelegate = new BeginOperationDelegate(this.OnBeginSimulate);
            }
            if ((this.onEndSimulateDelegate == null)) {
                this.onEndSimulateDelegate = new EndOperationDelegate(this.OnEndSimulate);
            }
            if ((this.onSimulateCompletedDelegate == null)) {
                this.onSimulateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSimulateCompleted);
            }
            base.InvokeAsync(this.onBeginSimulateDelegate, new object[] {
                        input}, this.onEndSimulateDelegate, this.onSimulateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.AnalysisService.AnalysisService.BeginValidate(string formmula, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginValidate(formmula, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BioCheck.AnalysisService.ValidationOutput BioCheck.AnalysisService.AnalysisService.EndValidate(System.IAsyncResult result) {
            return base.Channel.EndValidate(result);
        }
        
        private System.IAsyncResult OnBeginValidate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string formmula = ((string)(inValues[0]));
            return ((BioCheck.AnalysisService.AnalysisService)(this)).BeginValidate(formmula, callback, asyncState);
        }
        
        private object[] OnEndValidate(System.IAsyncResult result) {
            BioCheck.AnalysisService.ValidationOutput retVal = ((BioCheck.AnalysisService.AnalysisService)(this)).EndValidate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnValidateCompleted(object state) {
            if ((this.ValidateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ValidateAsync(string formmula) {
            this.ValidateAsync(formmula, null);
        }
        
        public void ValidateAsync(string formmula, object userState) {
            if ((this.onBeginValidateDelegate == null)) {
                this.onBeginValidateDelegate = new BeginOperationDelegate(this.OnBeginValidate);
            }
            if ((this.onEndValidateDelegate == null)) {
                this.onEndValidateDelegate = new EndOperationDelegate(this.OnEndValidate);
            }
            if ((this.onValidateCompletedDelegate == null)) {
                this.onValidateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnValidateCompleted);
            }
            base.InvokeAsync(this.onBeginValidateDelegate, new object[] {
                        formmula}, this.onEndValidateDelegate, this.onValidateCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BioCheck.AnalysisService.AnalysisService CreateChannel() {
            return new AnalysisServiceClientChannel(this);
        }
        
        private class AnalysisServiceClientChannel : ChannelBase<BioCheck.AnalysisService.AnalysisService>, BioCheck.AnalysisService.AnalysisService {
            
            public AnalysisServiceClientChannel(System.ServiceModel.ClientBase<BioCheck.AnalysisService.AnalysisService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAnalyze(BioCheck.AnalysisService.AnalysisInputDTO input, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = input;
                System.IAsyncResult _result = base.BeginInvoke("Analyze", _args, callback, asyncState);
                return _result;
            }
            
            public BioCheck.AnalysisService.AnalysisOutputDTO EndAnalyze(System.IAsyncResult result) {
                object[] _args = new object[0];
                BioCheck.AnalysisService.AnalysisOutputDTO _result = ((BioCheck.AnalysisService.AnalysisOutputDTO)(base.EndInvoke("Analyze", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFindCounterExamples(BioCheck.AnalysisService.AnalysisInputDTO input, BioCheck.AnalysisService.AnalysisOutputDTO output, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = input;
                _args[1] = output;
                System.IAsyncResult _result = base.BeginInvoke("FindCounterExamples", _args, callback, asyncState);
                return _result;
            }
            
            public BioCheck.AnalysisService.FurtherTestingOutputDTO EndFindCounterExamples(System.IAsyncResult result) {
                object[] _args = new object[0];
                BioCheck.AnalysisService.FurtherTestingOutputDTO _result = ((BioCheck.AnalysisService.FurtherTestingOutputDTO)(base.EndInvoke("FindCounterExamples", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSimulate(BioCheck.AnalysisService.SimulationInputDTO input, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = input;
                System.IAsyncResult _result = base.BeginInvoke("Simulate", _args, callback, asyncState);
                return _result;
            }
            
            public BioCheck.AnalysisService.SimulationOutputDTO EndSimulate(System.IAsyncResult result) {
                object[] _args = new object[0];
                BioCheck.AnalysisService.SimulationOutputDTO _result = ((BioCheck.AnalysisService.SimulationOutputDTO)(base.EndInvoke("Simulate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginValidate(string formmula, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = formmula;
                System.IAsyncResult _result = base.BeginInvoke("Validate", _args, callback, asyncState);
                return _result;
            }
            
            public BioCheck.AnalysisService.ValidationOutput EndValidate(System.IAsyncResult result) {
                object[] _args = new object[0];
                BioCheck.AnalysisService.ValidationOutput _result = ((BioCheck.AnalysisService.ValidationOutput)(base.EndInvoke("Validate", _args, result)));
                return _result;
            }
        }
    }
}
