<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmFx.Common</name>
    </assembly>
    <members>
        <member name="T:MvvmFx.Common.Helpers.ImageHelper">
            <summary>
            Utility class for image functions
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ImageHelper.GetImageSource(System.String)">
            <summary>
            Opens an Image file as an ImageSource
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MvvmFx.Common.ViewModels.SelectableCollection`1" -->
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1">
            <summary>
            Class that inherits from <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> and represents a 
            collection of <see cref="T:MvvmFx.Common.ViewModels.ViewModelCollection"/> objects, and provides additional 
            functionality for observing property changes on the collection and on the objects
            within it, on a per-property basis.
            </summary>
            <example>
            To add an event handler to changes in a named property in any of the items in the collection:
            <code>
               this.AddItemHandler("IsSelected", OnItemSelectedChanged);
            </code>
            </example>
            <remarks>
            Adding an item handler to a ObservableViewModelCollection creates a strong object reference to it. 
            This means the object will not be garbage collected as long as the referencing 
            object has a handler to it. This can lead to memory leaks if the handlers are 
            not explicitly removed. This can be done in two ways:
            <example>
            Call the RemoveItemHandler method when the referencing object does not need to receive
            property change notifications anymore:
            <code>
                this.RemoveItemHandler("IsSelected", OnItemSelectedChanged);
            </code>
            </example>
            <example>
            Call the Dispose method of the ObservableViewModelCollection before the object goes out of scope:
            <code>
                documentsPage.Dispose();
            </code>
            This calls the RemoveHandlers method internally.
            </example>
            </remarks>
            <typeparam name="T">The type of ViewModelBase that this is a collection of.</typeparam>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ViewModelCollection`1">
            <summary>
            The ViewModelCollection class.
            </summary>
            <remarks>
            Inherits from <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> and adds events for
            ItemAdded, ItemRemoved, ItemMoved, and ItemRemoving, also adds public methods
            for accessing and manipulating <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> items
            by their Key property.
            </remarks>
            <typeparam key="T">The type&lt;T&gt; of collection restricted to the base <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> class.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.AddRange(MvvmFx.Common.ViewModels.ViewModelCollection{`0},System.Predicate{`0})">
            <summary>
            Add a range of items where the predicate matches the items
            </summary>
            <param name="items"></param>
            <param name="match"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Remove a range of items where the predicate matches the items
            </summary>
            <param key="items"></param>
            <param key="match"></param>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ViewModelCollection`1.suppressPropertyChangedNotifications">
            <summary>
            Suppress property changed notifications state field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ViewModelCollection`1"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.GetItemById(System.Int32)">
            <summary>
            Gets the element in the collection with the specified id
            </summary>
            <param key="id">The key of the item to index.</param>
            <returns>The indexed item&lt;T&gt;.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.SetItemById(`0)">
            <summary>
            Sets the element in the collection with the specified id
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.AddRange(MvvmFx.Common.ViewModels.ViewModelCollection{`0})">
            <summary>
            Add a range of items.
            </summary>
            <param key="items">The items&lt;T&gt; to add.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a range of items.
            </summary>
            <param key="items">The items&lt;T&gt; to add.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.Remove(System.String)">
            <summary>
            Removes the item with the specified Key from the collection.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.RemoveAll">
            <summary>
            Removes all the items from the collection
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.RemoveAll(MvvmFx.Common.ViewModels.ViewModelCollection{`0})">
            <summary>
            Remove a range of items.
            </summary>
            <param key="items">The items&lt;T&gt; to remove.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.RemoveAll(System.Collections.Generic.List{`0})">
            <summary>
            Remove a range of items.
            </summary>
            <param key="items">The items&lt;T&gt; to remove.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.IndexOf(System.String)">
            <summary>
            Gets the index of an item with the given key, returning -1 if the item is not present.
            </summary>
            <param key="key">The key of the item for which the index of is desired.</param>
            <returns>The index of the item with the given key, or -1 if not found.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.IndexOf(System.Int32)">
            <summary>
            Gets the index of an item with the given Id, returning -1 if the item is not present.
            </summary>
            <param key="id">The ID of the item for which the index of is desired.</param>
            <returns>The index of the item with the given id, or -1 if not found.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.Contains(System.String)">
            <summary>
            If there collections contains the item.
            </summary>
            <param key="key">The key to index the item from the collection.</param>
            <returns>If the collection contains the items.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.Contains(System.Int32)">
            <summary>
            If there collections contains the item.
            </summary>
            <param key="key">The key to index the item from the collection.</param>
            <returns>If the collection contains the items.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.Sort">
            <summary>
            Perform a sort on the items in this collection.
            The default sort is to sort by key ascending.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.ClearItems">
            <summary>
            Removes the items before calling ClearItems
            </summary>
            <remarks>
            Just calling clear doesn't explicitly remove all the items, it doesn't
            raise ItemRemoved events for each cleared item.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            On the collection changed. Notify of the change.
            </summary>
            <param key="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnItemAdded(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            On item  added. Notify of the change.
            </summary>
            <param key="e">The <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs`1"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnItemMoved(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            On item  moved. Notify of the change.
            </summary>
            <param key="e">The <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs`1"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnItemRemoved(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            On item removed. Notify of the change.
            </summary>
            <param key="e">The <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs`1"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnItemRemoving(MvvmFx.Common.ViewModels.CancelItemEventArgs{`0})">
            <summary>
            On item removing.
            </summary>
            <param key="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.RemoveItem(System.Int32)">
            <summary>
            Override the RemoveItem method to raise the 
            cancellable ItemRemoving event.
            </summary>
            <param key="index"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnPropertyChanged(System.String)">
            <summary>
            On the property changed. Notify the listening object of the changed.
            </summary>
            <param key="propertyKey">The key of the property that changed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.SuppressChangeNotifications">
            <summary>
            Suppress the change notifications.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.ResumeChangeNotifications">
            <summary>
            Resume the change notification.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.OnRefresh">
            <summary>
            Refresh all the bindings.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelCollection`1.ToString">
            <summary>
            A string represents the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.ViewModelCollection`1.ItemAdded">
            <summary>
            The ItemAdded&lt;T&gt; event.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.ViewModelCollection`1.ItemMoved">
            <summary>
            The ItemMoved&lt;T&gt; event.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.ViewModelCollection`1.ItemRemoved">
            <summary>
            The ItemRemoved&lt;T&gt; event.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.ViewModelCollection`1.ItemRemoving">
            <summary>
            The ItemRemoving event. Cancelling this event will cancel the remove operation.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ViewModelCollection`1.Item(System.String)">
            <summary>
            Gets or sets the element in the collection with the specified key
            </summary>
            <param key="key">The key of the item to index.</param>
            <returns>The indexed item&lt;T&gt;.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ViewModelCollection`1.IsSuppressingPropertyChangedNotifications">
            <summary>
            Supress property changed notifications state field.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.propertyChangedHandlersDictionary">
            <summary>
            Dictionary of property changed handlers
            </summary>
            <remarks>
            When a property of this object changes, e.g. Count, this dictionary
            is checked to see if any handlers need to be invoked.
            </remarks>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.itemChangedHandlersDictionary">
            <summary>
            Dictionary of item property changed handlers
            </summary>
            <remarks>
            When a property of an item within this collection changes, e.g. "IsSelected", 
            this dictionary is checked to see if any handlers need to be invoked.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.OnItemAdded(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            Overrides the OnItemAdded method and adds and event handler
            to an item's PropertyChanged event when a new item is added
            to the collection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.OnItemRemoved(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            Overrides the OnItemRemoved method and removes the PropertChanged
            event handler when an item is removed from the collection
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Overrides the OnPropertyChanged method and notifies
            any handler of the property change
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.OnItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Occurs when the PropertyChanged event of one of the items
            in the collection is raised. Notifies any item handlers
            of the change.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.AddHandler(System.String,System.EventHandler)">
            <summary>
            Add a property changed event handler for the specfiied propertyName
            </summary>
            <param name="propertyName">The name of the property to attach the handler to.</param>
            <param name="handler">The handler to attach.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.RemoveHandler(System.String,System.EventHandler)">
            <summary>
            Remove a property changed event handler for the specfiied propertyName
            </summary>
            <param name="propertyName">The name of the property to remove the handlers for.</param>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.AddItemHandler(System.String,System.EventHandler{MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs{`0}})">
            <summary>
            Add an item property changed handler to invoke the delegate when the
            specified property changes on any of the items in the collection
            </summary>
            <param name="propertyName">The property name of to add the handler for.</param>
            <param name="handler">The handler&lt;T&gt; to add for the property name.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.RemoveItemHandler(System.String,System.EventHandler{MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs{`0}})">
            <summary>
            Remove an item property changed handler.
            </summary>
            <param name="propertyName">The property name of to remove the handler for.</param>
            <param name="handler">The handler&lt;T&gt; to remove for the property name.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.RemoveHandlers">
            <summary>
            Remove all the handlers to clean up the object references.
            Called by the Dispose method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.NotifyPropertyChanged(System.String,System.EventArgs)">
            <summary>
            Notify handlers of the property that changed.
            </summary>
            <param name="propertyName">The <see cref="T:System.String"/> name of the property that changed.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.NotifyItemPropertyChanged(System.String,MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs{`0})">
            <summary>
            Notify handlers of the item property that changed.
            </summary>
            <param name="propertyName">The <see cref="T:System.String"/> name of the property that changed.</param>
            <param name="e">The <see cref="T:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.Dispose">
            <summary>
            The Dispose method
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.Dispose(System.Boolean)">
            <summary>
            The protected virtual dispose that removes the handlers and clears the collection
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModelCollection`1.ItemChanged">
            <summary>
            The ItemChanged event is raised whenever a property of one of the items
            in the collection changes value
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.SelectableCollection`1._selectedItem">
            <summary>
            The selected item&lt;T&gt; field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.SelectableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableCollection`1.OnSelectedItemChanged(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            When the SelectedItem property changes, raise the SelectedItemChanged
            event and refresh the HasSelectedItem property to bindings.
            </summary>
            <param name="e">The argument containg the selected item.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableCollection`1.OnItemSelectedChanged(System.Object,MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs{`0})">
            <summary>
            Occurs when the <see cref="M:MvvmFx.Common.ViewModels.SelectableCollection`1.OnSelectedItemChanged(MvvmFx.Common.ViewModels.ItemEventArgs{`0})"/> changes. 
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableCollection`1.OnItemRemoved(MvvmFx.Common.ViewModels.ItemEventArgs{`0})">
            <summary>
            If an item is removed and is the selected item, set the selected item to null
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableCollection`1.ClearItems">
            <summary>
            Override ClearItmes to clear the selected item when the collection is cleared.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.SelectableCollection`1.SelectedItemChanged">
            <summary>
            The SelectedItemChanged&lt;T&gt; event.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.SelectableCollection`1.SelectedItem">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.SelectableCollection`1.SelectedItem"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.SelectableCollection`1.HasSelectedItem">
            <summary>
            Gets whether the collection has a selected item
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler`1">
            <summary>
            A class that inherits from <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler`1"/> and contains the functionality 
            to specify an action that should be invoked when either an instance of an <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>
            is executed, or any instance of a specified concrete type of <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>
            </summary>
            <remarks>
            A <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler"/> is like an <see cref="T:System.Windows.Input.ICommand"/> in the sense that it
            encapsulates a unit of application logic that can be executed via an Execute method.
            It is used to specify a unit of code that should be executed when a certain <see cref="T:System.Windows.Input.ICommand"/> 
            executes. 
            It can be registered to handle either a specific instance of a command, a Per-Instance Handler,
            or the execution of any instance of a specific type of command, a Per-Type Handler.
            </remarks>
            <typeparam name="T">The type of <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> to handle</typeparam>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.CommandHandler`1">
            <summary>
            The abstract base CommandHandler class that implements the <see cref="T:MvvmFx.Common.ViewModels.Commands.ICommandHandler"/> 
            interface and is responsible for executing a unit of logic when the specified view model command
            <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> executes.
            </summary>
            <remarks>
            A <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler"/> is like an <see cref="T:System.Windows.Input.ICommand"/> in the sense that it
            encapsulates a unit of application logic that can be executed via an Execute method.
            It is used to specify a unit of code that should be executed when a certain <see cref="T:System.Windows.Input.ICommand"/> 
            executes. 
            It can be registered to handle either a specific instance of a command, a Per-Instance Handler,
            or the execution of any instance of a specific type of command, a Per-Type Handler.
            Derive from this class to implement custom CommandHandlers.
            </remarks>
            <typeparam name="T">The <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> command interface.</typeparam>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ICommandHandler">
            <summary>
            The ICommandHandler defines a command handler contract, which is encapsulates
            a unit of logic that is executed after a certain ICommand is executed
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ICommandHandler.Execute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Execute the unit of logic when the <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> command is executed.
            </summary>
            <param name="cmd">The <see cref="T:System.Windows.Input.ICommand"/> command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler`1"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler`1.OnExecute(`0,System.Object)">
            <summary>
            Override and implement the unit of logic to be executed. 
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler`1.Execute(`0,System.Object)">
            <summary>
            Executes the specified unit of logic when the command has executed.
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler`1.MvvmFx#Common#ViewModels#Commands#ICommandHandler#Execute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Executes the specified unit of logic when the command has executed.
            </summary>
            <param name="cmd">The command <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler`1.#ctor(System.Action{`0,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler`1"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler`1.OnExecute(`0,System.Object)">
            <summary>
            Override and implement the unit of logic to be executed.
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler">
            <summary>
            A class that inherits from <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler`1"/> and contains the functionality 
            to specify an action that should be invoked when either an instance of an <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>
            is executed, or any instance of a specified concrete type of <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>
            </summary>
            <remarks>
            A <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler"/> is like an <see cref="T:System.Windows.Input.ICommand"/> in the sense that it
            encapsulates a unit of application logic that can be executed via an Execute method.
            It is used to specify a unit of code that should be executed when a certain <see cref="T:System.Windows.Input.ICommand"/> 
            executes. 
            It can be registered to handle either a specific instance of a command, a Per-Instance Handler,
            or the execution of any instance of a specific type of command, a Per-Type Handler.
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.CommandHandler">
            <summary>
            The abstract base CommandHandler class that implements the <see cref="T:MvvmFx.Common.ViewModels.Commands.ICommandHandler"/> 
            interface and is responsible for executing a unit of logic when the specified view model command
            <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> executes.
            </summary>
            <remarks>
            A <see cref="T:MvvmFx.Common.ViewModels.Commands.CommandHandler"/> is like an <see cref="T:System.Windows.Input.ICommand"/> in the sense that it
            encapsulates a unit of application logic that can be executed via an Execute method.
            It is used to specify a unit of code that should be executed when a certain <see cref="T:System.Windows.Input.ICommand"/> 
            executes. 
            It can be registered to handle either a specific instance of a command, a Per-Instance Handler,
            or the execution of any instance of a specific type of command, a Per-Type Handler.
            Derive from this class to implement custom CommandHandlers.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler.OnExecute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Override and implement the unit of logic to be executed. 
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.CommandHandler.Execute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Execute the specified usint of logic.
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler.#ctor(System.Action{System.Windows.Input.ICommand,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler.OnExecute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            Override and implement the unit of logic to be executed.
            </summary>
            <param name="cmd">The command associated to the handler.</param>
            <param name="parameter">The parameter to pass to the unit of logic.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService">
            <summary>
             ValidationRules class is designed to provide support 
             to validate rules applied against properties of the 
             ViewModel object. 
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.#ctor(MvvmFx.Common.ViewModels.ViewModelBase)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.AddInstanceBusinessRules">
            <summary>
            Override this method in your business class to
            be notified when you need to set up business
            rules.
            </summary>
            <remarks>
            This method is automatically called by CSLA .NET
            when your object should associate per-instance
            validation rules with its properties.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.AddBusinessRules">
            <summary>
            Override this method in your business class to
            be notified when you need to set up shared 
            business rules.
            </summary>
            <remarks>
            This method is automatically called by CSLA .NET
            when your object should associate per-type 
            validation rules with its properties.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.ViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for the PropertyChanged event of the ViewModel
            object being tracked. This marks the ChangeService as being
            modified, and maintains hooks to a trackable child object if
            the TrackingMode is TrackChildren.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.ValidationRules">
            <summary>
            Provides access to the broken rules functionality.
            </summary>
            <remarks>
            This property is used within your business logic so you can
            easily call the AddRule() method to associate validation
            rules with your object's properties.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.IsValid">
            <summary>
            Returns <see langword="true" /> if the object 
            and its child objects are currently valid, 
            <see langword="false" /> if the
            object or any of its child objects have broken 
            rules or are otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. For instance, you should always override
            this method if your object has child objects, since the validity of this object
            is affected by the validity of all child objects.
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.IsSelfValid">
            <summary>
            Returns <see langword="true" /> if the object is currently 
            valid, <see langword="false" /> if the
            object has broken rules or is otherwise invalid.
            </summary>
            <remarks>
            <para>
            By default this property relies on the underling ValidationRules
            object to track whether any business rules are currently broken for this object.
            </para><para>
            You can override this property to provide more sophisticated
            implementations of the behavior. 
            </para>
            </remarks>
            <returns>A value indicating if the object is currently valid.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.BrokenRulesCollection">
            <summary>
            Provides access to the readonly collection of broken business rules
            for this object.
            </summary>
            <returns>A Csla.Validation.RulesCollection object.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.ThrowExceptionsOnBrokenRule">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationService.ThrowExceptionsOnBrokenRule"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationException">
            <summary>
            Exception class indicating that there was a validation
            problem with a business object.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb">
            <summary>
            A class that represents one crumb in a breadcrumb control.
            A Breadcrumb has _text and can be clickable. 
            When clicked, it executures a NavigationHandler delegate.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ViewModelBase">
            <summary>
            The base class for all ViewModel classes. It implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            and exposes a Key property which can be used by <see cref="T:MvvmFx.Common.ViewModels.ViewModelCollection"/>
            </summary>
            <remarks>
            The Key property is optional, and is only used by derived ViewModels that need
            to be distinguished by a value in collections, or by storing an id or data about
            the model entity it corresponds to.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            On the specified property changing invoke any handlers attached.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ViewModelBase.key">
            <summary>
            The key field.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ViewModelBase.id">
            <summary>
            The Id field.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ViewModelBase._throwOnInvalidPropertyName">
            <summary>
            If to throw invalid property name state field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.VerifyPropertyName(System.String)">
            <summary>
            Verify that the property name name exists on the type.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.SupressBindings">
            <summary>
            Supresses the bindings.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.ResumeBindings">
            <summary>
            Resumes the bindings.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.Refresh">
            <summary>
            Refreshes the the bindings to properties of this instance.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.Refresh(System.String)">
            <summary>
            Refreshes the bindings to the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.OnRefresh(System.String)">
            <summary>
            Refreshes the bindings to the specified property name.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ViewModelBase.ToString">
            <summary>
            A string represents the current object. 
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.ViewModelBase.PropertyChanged">
            <summary>
            The event PropertyChanged of type PropertyChangedEventHandler.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ViewModelBase.Key">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.ViewModelBase.Key"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ViewModelBase.Id">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.ViewModelBase.Id"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ViewModelBase.ThrowOnInvalidPropertyName">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.ViewModelBase.ThrowOnInvalidPropertyName"/> property.
            </summary>
            <value>If to throw and execption on an invalid property name.</value>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.#ctor(MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService,MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.IProcessStep)">
            <summary>
            Create a non-clickable breadcrumb
            </summary>
            <param name="processService"></param>
            <param name="step"></param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.Key">
            <summary>
            Property Key (string)
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.Text">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.Text"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.Navigate">
            <summary>
            The command to execute when the breadcrumb is clicked on
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.IsClickable">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.IsClickable"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.Breadcrumb.NavigateHandler">
            <summary>
            The delegate type to execute
            </summary>
        </member>
        <member name="T:System.Windows.IWeakEventListener">
            <summary>
            Provides event listening support for classes that expect to receive events
            through the WeakEvent pattern and a WeakEventManager.
            </summary>
        </member>
        <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the
               WeakEventManager calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>true if the listener handled the event. It is considered an error by the
            WeakEventManager handling in WPF to register a listener for an event that the
            listener does not handle. Regardless, the method should return false if it receives
            an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand">
            <summary>
            RoutedViewModelCommand inherits from <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> and implements the <see cref="T:MvvmFx.Common.ViewModels.Commands.ICommandHandler"/> interface.
            It doesn't contain it's own execution logic. Instead, it allows instances of the <see cref="T:MvvmFx.Common.ViewModels.Commands.Command"/> class
            to bind to it. They are executed when the RoutedViewModelCommand is instructed to execute.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.Command">
            <summary>
            Base Command class that exposes the public static methods to register an
            <see cref="T:MvvmFx.Common.ViewModels.Commands.ICommandHandler"/> to handle the execution of either a specified 
            instance of an <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> or any instance of the specified
            type of <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.Command.instanceHandlers">
            <summary>
            Instance Command bindings field.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.Command.typeHandlers">
            <summary>
            Typed Command handlers field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.AddHandler``1(MvvmFx.Common.ViewModels.Commands.ICommandHandler)">
            <summary>
            Add a command handler to be executed after a command of the specified type executes
            </summary>
            <param name="handler">The handler to be added.</param>
            <typeparam name="TCommand">The type of <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/>to be invoke the handler.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.RemoveHandler``1(MvvmFx.Common.ViewModels.Commands.ICommandHandler)">
            <summary>
            Remove a command handler 
            </summary>
            <param name="handler">The handler to be removed.</param>
            <typeparam name="TCommand">The command of type IViewModelCommand to remove its execute handler.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.AddHandler(MvvmFx.Common.ViewModels.Commands.IViewModelCommand,MvvmFx.Common.ViewModels.Commands.ICommandHandler)">
            <summary>
            Add a command handler to be executed after the specified instance of the command executes
            </summary>
            <param name="command">The command to be executed.</param>
            <param name="handler">The handler to be added.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.RemoveHandler(MvvmFx.Common.ViewModels.Commands.IViewModelCommand,MvvmFx.Common.ViewModels.Commands.ICommandHandler)">
            <summary>
            Remove a command handler for the specfied command
            </summary>
            <param name="command">The command to remove it's command handler.</param>
            <param name="handler">The handler to be removed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.RemoveHandlers">
            <summary>
            Remove all the handlers to clean up the object references.
            Called by the Dispose method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.NotifyTypeHandlers(System.Object)">
            <summary>
            Notify handlers when the command is executed.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Command.NotifyInstanceHandlers(System.Object)">
            <summary>
            Notify handlers when the command is executed.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand">
            <summary>
            The IViewModelCommand defines a command contract for a <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/>, 
            inheriting the base commanding contract <see cref="T:System.Windows.Input.ICommand"/>. 
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.name">
            <summary>
            The name member to be bound to on the button.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand"/> class.
            </summary>
            <param name="name">The name of the </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.Execute">
            <summary>
            Execute the RoutedUICommand's registered command bindings.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.Execute(System.Object)">
            <summary>
            Execute the RoutedUICommand's registered command bindings.
            </summary>
            <param name="parameter">The paramter to pass.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.CanExecute(System.Object)">
            <summary>
            Deteremine if the function can be executed.
            </summary>
            <param name="parameter">The parameter to be passed to the can execute function.</param>
            <returns>If the execute function can be executed.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.OnDispose">
            <summary>
            Override in derived classes to clean up specific resources in the concrete class.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.CanExecuteChanged">
            <summary>
            The CanExecuteChanged event fired.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.RoutedViewModelCommand.Name">
            <summary>
            The name of the command which well show when it is bound to a button.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Observable.CollectionObserver`1">
            <summary>
            Monitors the PropertyChanged event of an object that implements INotifyPropertyChanged,
            and executes callback methods (i.e. handlers) registered for properties of that object.
            </summary>
            <typeparam name="TPropertySource">The type of object to monitor for property changes.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.CollectionObserver`1.#ctor(MvvmFx.Common.ViewModels.ViewModelCollection{`0})">
            <summary>
            Initializes a new instance of PropertyObserver, which
            observes the 'propertySource' object for property changes.
            </summary>
            <param name="collection">The object to monitor for property changes.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.CollectionObserver`1.AddHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{`0})">
            <summary>
            Registers a callback to be invoked when the PropertyChanged event has been raised for the specified property.
            </summary>
            <param name="expression">A lambda expression like 'n => n.PropertyName'.</param>
            <param name="handler">The callback to invoke when the property has changed.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.CollectionObserver`1.RemoveHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Removes the callback associated with the specified property.
            </summary>
            <param name="propertyName">A lambda expression like 'n => n.PropertyName'.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.IViewModelLoader.Load(MvvmFx.Common.ViewModels.ViewModelBase)">
            <summary>
            Loads an existing ViewModel object with data from the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.IViewModelLoader`1.Load(`0)">
            <summary>
            Loads an existing ViewModel object with data from the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.ReflectionHelper">
            <summary>
            Common utility functions for using reflection
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ReflectionHelper.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Get a list of attribute names applied to a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> in question.</param>
            <param name="inherit">Indicated whether attributes in the type's ancestory should be considered.</param>
            <returns>A <see cref="!:System.Collections.Generic.List"/> of <see cref="T:System.String"/> 
            objects, detailing the names of any attributes found on the type.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ReflectionHelper.GetAttributes(System.Reflection.MethodInfo,System.Boolean)">
            <summary>
            Get a list of attribute names applied to a method, defined by the supplied <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
            <param name="method">The <see cref="!:System.Relfection.MethodInfo"/> in question.</param>
            <param name="inherit">Indicated whether attributes in the method's ancestory should be considered.</param>
            <returns>A <see cref="!:System.Collections.Generic.List"/> of <see cref="T:System.String"/> 
            objects, detailing the names of any attributes found on the method.</returns>
        </member>
        <member name="T:MvvmFx.Common.Helpers.IsolatedStorageHelper">
            <summary>
            Static helper class for reading/writing in Isolated Storage
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.IsolatedStorageHelper.FileExists(System.String)">
            <summary>
            Checks whether the File exists.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.IsolatedStorageHelper.DeleteFile(System.String)">
            <summary>
            Deletes the file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.IsolatedStorageHelper.DeleteDirectory(System.String)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <see cref="!:http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragefile.deletedirectory.aspx"/>
        </member>
        <member name="M:MvvmFx.Common.Helpers.IsolatedStorageHelper.Reset">
            <summary>
            Resets the IsolatedStorage for this application and user
            </summary>
            <see cref="!:http://msdn.microsoft.com/en-us/library/system.io.isolatedstorage.isolatedstoragefile.deletedirectory.aspx"/>
        </member>
        <member name="M:MvvmFx.Common.Helpers.IsolatedStorageHelper.GetFileNames(System.String)">
            <summary>
            Gets the names of the files from the directory.
            </summary>
            <param name="directoryName">Name of the directory.</param>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.Helpers.DispatcherHelper">
            <summary>
            Static utility class containing helper methods for the Dispatcher.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DispatcherHelper.BeginInvoke(System.Action)">
            <summary>
            Invoke the specified action asynchronously with a Background priority
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DispatcherHelper.DoubleBeginInvoke(System.Action)">
            <summary>
            Doubles the begin invoke to ensure the execution queue is cleared 
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DispatcherHelper.QuadBeginInvoke(System.Action)">
            <summary>
            Quadrouples the begin invoke to ensure the execution queue is cleared 
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DispatcherHelper.GetCurrent">
            <summary>
            Returns the current Dispatcher for the GUI thread
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DispatcherHelper.CheckAccess">
            <summary>
            Determines whether the calling thread is the thread associated with this System.Windows.Threading.Dispatcher.
            </summary>
            <returns>true if the calling thread is the thread associated with this System.Windows.Threading.Dispatcher; otherwise, false.</returns>
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.DataTemplateSelector.DataContentControl"/> class.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.DataTemplateSelector.DataContentControl.ContentTemplateSelectorProperty">
            <summary>
            The <see cref="F:MvvmFx.Common.DataTemplateSelector.DataContentControl.ContentTemplateSelectorProperty"/> dependency property registered with the 
            Microsoft Presentation Foundation (WPF) property system.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataContentControl.OnContentTemplateSelectorChanged(MvvmFx.Common.DataTemplateSelector.DataTemplateSelectorBase,MvvmFx.Common.DataTemplateSelector.DataTemplateSelectorBase)">
            <summary>
            On the content template changed, refresh the current conent presenter.
            </summary>
            <param name="oldValue">The old value for the dependency property.</param>
            <param name="newValue">The new value for the depenedency property.</param>
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataContentControl.OnApplyTemplate">
            <summary>
            On the template applied, refresh the content presenter.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataContentControl.OnContentChanged(System.Object,System.Object)">
            <summary> 
            Select the appropriate DataTemplate when the Content changes. 
            </summary> 
            <param name="oldContent">The old Content value.</param> 
            <param name="newContent">The new Content value.</param> 
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataContentControl.RefreshContentTemplate">
            <summary>
            Refresh the current content presenter with the associated data template selected.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.DataTemplateSelector.DataContentControl.ContentTemplateSelectorBase">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.DataTemplateSelector.DataContentControl.ContentTemplateSelectorBase"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Converters.ColorToSolidColorBrushConverter">
            <summary>
            Converter used to create a <see cref="T:System.Windows.Media.SolidColorBrush"/> from a
            <see cref="T:System.Windows.Media.Color"/>.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ItemEventArgs`1">
            <summary>
            Event argument carrying a <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> item
            </summary>
            <typeparam name="T">The event argument of base type <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/></typeparam>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemEventArgs`1.item">
            <summary>
            The lt;T&gt; item stored with the event args field. 
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemEventArgs`1.oldStartingIndex">
            <summary>
            The old start starting index field.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemEventArgs`1.newStartingIndex">
            <summary>
            The new starting index field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ItemEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs`1"/> class.
            </summary>
            <param name="item">The item&lt;T&gt;</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ItemEventArgs`1.#ctor(`0,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs`1"/> class.
            </summary>
            <param name="item">The item lt;T&gt; to add to the argument.</param>
            <param name="oldStartingIndex">The old starting index to add to the argument.</param>
            <param name="newStartingIndex">The new starting index to add to the argument.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemEventArgs`1.Item">
            <summary>
            Gets the value of the <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> Item property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemEventArgs`1.OldStartingIndex">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.ItemEventArgs`1.OldStartingIndex"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemEventArgs`1.NewStartingIndex">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.ItemEventArgs`1.NewStartingIndex"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ItemEventArgs">
            <summary>
            Event argument carrying a <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> item
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemEventArgs.item">
            <summary>
            The item field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ItemEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ItemEventArgs"/> class.
            </summary>
            <param name="item">The item to add to the argument.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemEventArgs.Item">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.ItemEventArgs.Item"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.CancelItemEventArgs`1">
            <summary>
            Cancelable cvent argument carrying a <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> item
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.CancelItemEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.CancelItemEventArgs`1"/> class.
            </summary>
            <param name="item">The item&lt;T&gt;</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.CancelItemEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.CancelItemEventArgs`1"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="cancel">if set to <c>true</c> [cancel].</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.CancelItemEventArgs`1.Cancel">
            <summary>
            Gets or sets the value of the cancel flag.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StepEventArgs">
            <summary>
            Event argument for an IProcessStep object
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StepEventArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.IProcessStep)">
            <summary>
            Event arguments for a step 
            </summary>
            <param name="key"></param>
            <param name="item"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.WeakEventing.CollectionChangedWeakEventSource">
            <summary>
            Default CollectionChanged weak-event wrapper for INotifyCollectionChanged event source.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1">
            <summary>
            Base class to wrap a specific event with the WeakEventListener.
            </summary>
            <typeparam name="TSource">The type of the event source.</typeparam>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1._weakEventSource">
            <summary>
            A weak reference to the event source
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1._weakListener">
            <summary>
             A weak reference to the WeakEventListener instance.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1.SetEventSource(System.Object)">
            <summary>
            Set the event source for this instance. 
            When passing a new event source it replaces the event source the 
            listener is listen for an event. When passing null/nothing is detaches 
            the previous event source from this event listener. 
            </summary>
            <param name="eventSource">The event source instance.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1.CreateWeakEventListenerInternal(`0)">
            <summary>
            Does some debug-time checks and creates the weak event listener.
            </summary>
            <param name="eventObject">The event source instance</param>
            <returns>Return the weak event listener instance</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1.CreateWeakEventListener(`0)">
            <summary>
            When overridden in a derived class, it creates the weak event listener for the given event source.
            </summary>
            <param name="eventObject">The event source instance to listen for an event</param>
            <returns>Return the weak event listener instance</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1.Detach">
            <summary>
            Detaches the event from the event source.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Helpers.WeakEventing.WeakEventSourceBase`1.EventSource">
            <summary>
            Gets the event source instance which this listener is using.
            </summary>
            <remarks>
            The reference to the event source is weak.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DragDropHelper`1.Dispose">
            <summary>
            The Dispose method
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DragDropHelper`1.Dispose(System.Boolean)">
            <summary>
            The protected virtual dispose that removes the handlers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.ConverterHelper">
            <summary>
            Static utility class containing helper methods for converters.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.IsNullOrUnset(System.Object)">
            <summary>
            Is the object null or unset.
            </summary>
            <param name="value">The value to check.</param>
            <returns>If the value is null or unset.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.ContainsNullOrUnset(System.Object[])">
            <summary>
            Contains any null or unset values.
            </summary>
            <param name="values">The list of values to check.</param>
            <returns>If there are any null or unset values.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.IsUnset(System.Object)">
            <summary>
            Is the value unset.
            </summary>
            <param name="value">The value to check.</param>
            <returns>If the value is unset.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.ContainsUnset(System.Object[])">
            <summary>
            If there are any unset values.
            </summary>
            <param name="values">The values to check.</param>
            <returns>If there are any unset values found.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.IsValidString(System.String)">
            <summary>
            Is there string valid.
            </summary>
            <param name="value">The string to check.</param>
            <returns>If the string is valid.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.IsValidType(System.Object,System.Type)">
            <summary>
            Is the type valid.
            </summary>
            <param name="subject">The subject to check it's type.</param>
            <param name="targetType">The target type used as the root of the comparision.</param>
            <returns>If both types are the same.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ConverterHelper.IsValidType(System.Object[],System.Type)">
            <summary>
            Is the type valid.
            </summary>
            <param name="subjects">The subjects to check their type.</param>
            <param name="targetType">The target type used as the root of the comparision.</param>
            <returns>If both types are the same.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler`1">
            <summary>
            A StoryboardCommandHandler inherits from <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler"/>
            and encapsulates the logic to begin a <see cref="T:System.Windows.Media.Animation.Storyboard"/> after
            the <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> it is handling is executed.
            </summary>
            <typeparam name="T">The type of command that this is handling</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler`1.#ctor(System.Windows.Media.Animation.Storyboard)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler`1"/> class.
            </summary>
            <param name="storyboard">The storyboard.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler">
            <summary>
            A StoryboardCommandHandler inherits from <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommandHandler"/>
            and encapsulates the logic to begin a <see cref="T:System.Windows.Media.Animation.Storyboard"/> after
            the <see cref="T:MvvmFx.Common.ViewModels.Commands.IViewModelCommand"/> it is handling is executed.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler.#ctor(System.Windows.Media.Animation.Storyboard)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandler"/> class.
            </summary>
            <param name="storyboard">The storyboard.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules">
            <summary>
            Implements common business rules.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.StringRequired(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value contains one or more
            characters.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.StringMaxLength(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value doesn't exceed
            a specified length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.StringMinLength(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring a string value has a
            minimum length.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">Arguments parameter specifying the name of the string
            property to validate</param>
            <returns><see langword="false" /> if the rule is broken</returns>
            <remarks>
            This implementation uses late binding, and will only work
            against string property values.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValue(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't exceed
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValue(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring an integer value doesn't go below
            a specified value.
            </summary>
            <param name="target">Object containing the data to validate.</param>
            <param name="e">Arguments parameter specifying the name of the
            property to validate.</param>
            <returns><see langword="false"/> if the rule is broken.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValue``1(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified maximum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the max
            allowed value.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValue``1(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule ensuring that a numeric value
            doesn't exceed a specified minimum.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
            <param name="target">Object containing value to validate.</param>
            <param name="e">Arguments variable specifying the
            name of the property to validate, along with the min
            allowed value.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExMatch(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Rule that checks to make sure a value
            matches a given regex pattern.
            </summary>
            <param name="target">Object containing the data to validate</param>
            <param name="e">RegExRuleArgs parameter specifying the name of the 
            property to validate and the regex pattern.</param>
            <returns>False if the rule is broken</returns>
            <remarks>
            This implementation uses late binding.
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.StringMaxLength(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs">
            <summary>
            Object providing extra information to methods that
            implement business rules.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.GetPropertyName(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Gets the property name from the RuleArgs
            object, using the friendly name if one
            is defined.
            </summary>
            <param name="e">Object from which to 
            extract the name.</param>
            <returns>
            The friendly property name if it exists,
            otherwise the property name itself.
            </returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.PropertyName">
            <summary>
            The name of the property to be validated.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.PropertyFriendlyName">
            <summary>
            Gets or sets a friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.Description">
            <summary>
            Set by the rule handler method to describe the broken
            rule.
            </summary>
            <value>A human-readable description of
            the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.Severity">
            <summary>
            Gets or sets the severity of the broken rule.
            </summary>
            <value>The severity of the broken rule.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs.StopProcessing">
            <summary>
            Gets or sets a value indicating whether this
            broken rule should stop the processing of subsequent
            rules for this property.
            </summary>
            <value><see langword="true" /> if no further
            rules should be process for this property.</value>
            <remarks>
            Setting this property only has an effect if
            the rule method returns <see langword="false" />.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean)">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">Initial default severity for the rule.</param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> parameter defines only the initial default 
            severity value. If the rule changes this value by setting
            e.Severity, then that new value will become the default for all
            subsequent rule invocations.
            </para><para>
            To avoid confusion, it is recommended that the 
            <b>severity</b> constructor parameter 
            only be used for rule methods that do not explicitly set
            e.Severity.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of RuleArgs.
            </summary>
            <param name="propertyName">The name of the property to be validated.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="severity">The default severity for the rule.</param>
            <param name="stopProcessing">
            Initial default value for the StopProcessing property.
            </param>
            <param name="args">Reference to a Dictionary containing 
            name/value arguments for use by the rule method.</param>
            <remarks>
            <para>
            The <b>severity</b> and <b>stopProcessing</b> parameters 
            define only the initial default values. If the rule 
            changes these values by setting e.Severity or
            e.StopProcessing, then the new values will become 
            the default for all subsequent rule invocations.
            </para><para>
            To avoid confusion, It is recommended that the 
            <b>severity</b> and <b>stopProcessing</b> constructor 
            parameters only be used for rule methods that do 
            not explicitly set e.Severity or e.StopProcessing.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.ToString">
            <summary>
            Return a string representation of
            the object using the rule:// URI
            format.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.DecoratedRuleArgs.Item(System.String)">
            <summary>
            Gets or sets an argument value for use
            by the rule method.
            </summary>
            <param name="key">The name under which the value is stored.</param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxLength">Max length of characters allowed.</param>
            <param name="format">Format string for the max length
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxLengthRuleArgs.MaxLength">
            <summary>
            Get the max length for the string.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.StringMinLength(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minLength">min length of characters allowed.</param>
            <param name="format">Format string for the min length
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinLengthRuleArgs.MinLength">
            <summary>
            Get the min length for the string.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValue(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMaxValueRuleArgs.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValue(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.IntegerMinValueRuleArgs.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="maxValue">Maximum allowed value for the property.</param>
            <param name="format">Format string for the max value
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MaxValueRuleArgs`1.MaxValue">
            <summary>
            Get the max value for the property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.MinValue"/> rule method.
            </summary>
            <typeparam name="T">Type of the property to validate.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Create a new object.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="minValue">Minimum allowed value for the property.</param>
            <param name="format">Format string for the min value
            value in the broken rule string.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.MinValueRuleArgs`1.MinValue">
            <summary>
            Get the min value for the property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns">
            <summary>
            List of built-in regex patterns.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns.SSN">
            <summary>
            US Social Security number pattern.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns.Email">
            <summary>
            Email address pattern.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs">
            <summary>
            Custom <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs"/> object required by the
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExMatch(System.Object,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)"/> rule method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Built-in regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="pattern">Custom regex pattern to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.Text.RegularExpressions.Regex,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="regEx"><see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.#ctor(System.String,System.String,System.Text.RegularExpressions.Regex,MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions)">
            <summary>
            Creates a new object.
            </summary>
            <param name="propertyName">Name of the property to validate.</param>
            <param name="friendlyName">A friendly name for the property, which
            will be used in place of the property name when
            creating the broken rule description string.</param>
            <param name="regEx"><see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx"/> object to use.</param>
            <param name="nullResult">
            Value indicating how a null value should be
            handled by the rule method.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.GetPattern(MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExPatterns)">
            <summary>
            Returns the specified built-in regex pattern.
            </summary>
            <param name="pattern">Pattern to return.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx">
            <summary>
            The <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.RegEx"/> object used to validate
            the property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResult">
            <summary>
            Gets a value indicating whether a null value
            means the rule will return true or false.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions">
            <summary>
            List of options for the NullResult
            property.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnFalse">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning false.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ReturnTrue">
            <summary>
            Indicates that a null value
            should always result in the 
            rule returning true.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CommonRules.RegExRuleArgs.NullResultOptions.ConvertToEmptyString">
            <summary>
            Indicates that a null value
            should be converted to an
            empty string before the
            regular expression is
            evaluated.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.SaveProcessCommand">
            <summary>
            Command to save the process
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand">
             <summary>
             The case ViewModelCommand implements ICommand and allows
             ViewModel-level functionality to execute when the commmand
             is executed.
             </summary>
             <remarks>
             Inherit from this class to create an encapsulated unit of application
             logic that should be executed when the Exceute method of its <see cref="T:System.Windows.Input.ICommand"/>
             interface is executed.
             Override the abstract protected OnExecute method to implement the unit of
             code that should be executed. 
             Override the virtual protected OnCanExecute method
             to specify custom logic to be evaluated when the CanExecute method of its <see cref="T:System.Windows.Input.ICommand"/>
             interface is called.
             Call the protected OnCanExecuteChanged or the public RaiseCanExecuteChanged
             methods to raise the CanExecuteChanged event of its <see cref="T:System.Windows.Input.ICommand"/>
             interface, and have the CanExecute method re-evaluated. 
             </remarks>
             <example>
             The example below shows a concrete implementation of a ViewModelCommand.
             It overrides the OnExecute and OnCanExecute methods to specify
             the code to run when the command is executed, and the code to evaluate whether
             the command can execute.
             It also leverages the behaviour of the <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel"/> class
             to specify when that the CanExecute method should be re-evaluated when a certain 
             property changes.
             <code>
               public class SaveProcessCommand : ViewModelCommand
               {
                private readonly ProcessService processService;
            
                public SaveProcessCommand(ProcessService processService)
                {
                    this.processService = processService;
            
                    // When the CurrentStep property of processService changes,
                    // re-evaluate the CanExecute method.
                    processService.AddHandler("CurrentStep", OnCanExecuteChanged);
                }
            
                protected override void OnExecute(object param)
                {
                    processService.Save();
                }
            
                protected override bool OnCanExecute(object param)
                {
                    return processService.State.IsModified;
                }
             }
             </code>
             </example>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.Execute">
            <summary>
            Execute the specified specified command logic.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.Execute(System.Object)">
            <summary>
            Execute the specified specified command logic.
            </summary>
            <param name="parameter">The object to be passed to the command execute function.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.RaiseCanExecuteChanged">
            <summary>
            Public method to raise the OnCanExecuteChanged event from the outside
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Can execute check for the specified command.
            </summary>
            <param name="parameter">The object to be passed to the command can execute function.</param>
            <returns>If the command can be executed.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.System#Windows#Input#ICommand#Execute(System.Object)">
            <summary>
            Execute the specified specified command logic.
            </summary>
            <param name="parameter">The object to be passed to the command execute function.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.OnCanExecute(System.Object)">
            <summary>
            Default can execute function to be called.
            </summary>
            <remarks>
            Most commands are enabled most of the time on this model.
            </remarks>
            <param name="parameter">The object to be passed to the command can execute function.</param>
            <returns>Default return value of True.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.OnCanExecuteChanged">
            <summary>
            Notify the of the can execute changing.
            </summary>
            <remarks>
            Override in derived class to provide additional logic to deteremine
            if the command can be executed.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.OnCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> changes.  Deteremin if the command
            can be executed.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.OnExecute(System.Object)">
            <summary>
            Override in derived class to provide the logic to be excuted.
            </summary>
            <param name="parameter">The parameter required to execute a unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.OnDispose">
            <summary>
            Override in derived classes to clean up specific resources in the concrete class.
            </summary>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.Commands.ViewModelCommand.CanExecuteChanged">
            <summary>
            The can execute changed event of type <see cref="T:System.EventHandler"/>.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel">
            <summary>
            ViewModel class that inherits from <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> and
            provides additional functionality for observing property changes on
            the ViewModel on a per-property basis.
            </summary>
            <example>
            To add a handler to changes in a property:
            <code>
              documentsPage.AddHandler("IsLoaded",
                                       delegate { addDocuments.RaiseCanExecuteChanged(); });
            </code>
            </example>
            <remarks>
            Adding a handler to a ViewModel object creates a strong object reference to it. 
            This means the object will not be garbage collected as long as the referencing 
            object has a handler to it. This can lead to memory leaks if the handlers are 
            not explicitly removed. This can be done in three ways:
            <example>
            Call the RemoveHandler method when the referencing object does not need to receive
            property change notifications anymore:
            <code>
            documentsPage.RemoveHandler("IsLoaded",
                                       OnDocumentsPageIsLoadedChanged);
            </code>
            </example>
            <example>
            Call the protected RemoveHandlers method when the referenced object should not notify its
            observers anymore:
            <code>
            this.RemoveHandlers()
            </code>
            </example>
            <example>
            Call the Dispose method of the ObservableViewModel before the object goes out of scope:
            <code>
            documentsPage.Dispose();
            </code>
            This calls the RemoveHandlers method internally.
            </example>
            </remarks>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.propertyChangedHandlersDictionary">
            <summary>
            The dictionary of property changed handlers
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Overrides the OnPropertyChanged method of ViewModelBase
            and invokes any added handlers
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.AddHandler(System.String,System.EventHandler)">
            <summary>
            Add a property changed event handler for the specfiied propertyName
            </summary>
            <param name="propertyName">The name of the property to attach the handler to.</param>
            <param name="handler">The handler to attach.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.RemoveHandler(System.String,System.EventHandler)">
            <summary>
            Remove a property changed event handler for the specfiied propertyName
            </summary>
            <param name="propertyName">The name of the property to remove the handlers for.</param>
            <param name="handler">The handler to remove.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.RemoveHandlers">
            <summary>
            Remove all the handlers to clean up the object references.
            Called by the Dispose method.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.Dispose">
            <summary>
            The Dispose method
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel.Dispose(System.Boolean)">
            <summary>
            The protected virtual dispose that removes the handlers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.EventDelegateHelper">
            <summary>
            Helper utility methods for common event and delegate functions
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.AssemblyHelper">
            <summary>
            Static utility class with methods for manipulating assemblys
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AssemblyHelper.GetExecutingAssemblyVersionNo">
            <summary>
            Gets the the assembly version number.  
            </summary>
            <returns>The assembly version number.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AssemblyHelper.GetAssemblyVersionNo(System.Reflection.Assembly)">
            <summary>
            Gets the the version number from the specified assembly.  
            </summary>
            <returns>The assembly version number.</returns>
        </member>
        <member name="T:MvvmFx.Common.Converters.BoolToVisibilityConverter">
            <summary>
            A type converter for visibility and boolean values
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MvvmFx.Common.ViewModels.Factories.CreateCriteria" -->
        <!-- Badly formed XML comment ignored for member "T:MvvmFx.Common.ViewModels.Factories.ICreateCriteria" -->
        <member name="P:MvvmFx.Common.ViewModels.Factories.ICreateCriteria.Key">
            <summary>
            Gets or sets the Key of the model object that the <see cref="T:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1"/> should load from
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Factories.ICreateCriteria.IsEmpty">
            <summary>
            Gets whether it is an empty criteria
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Factories.CreateCriteria.empty">
            <summary>
            The static instance of CreateCriteria that represents an Empty criteria
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.CreateCriteria.#cctor">
            <summary>
            Initializes the <see cref="T:MvvmFx.Common.ViewModels.Factories.CreateCriteria"/> class and creates the
            static Empty instance.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.CreateCriteria.IsNullOrEmpty(MvvmFx.Common.ViewModels.Factories.ICreateCriteria)">
            <summary>
            Returns whether the specified <see cref="T:MvvmFx.Common.ViewModels.Factories.ICreateCriteria"/> is
            null or empty.
            </summary>
            <param name="criteria">The criteria to check</param>
            <returns>true if null or empty, false otherwise</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Factories.CreateCriteria.Empty">
            <summary>
            Gets the Empty instance of CreateCriteria
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Factories.CreateCriteria.IsEmpty">
            <summary>
            Gets whether the CreateCritera class is Empty
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Factories.CreateCriteria.Key">
            <summary>
            Gets or sets the string Key value of the <see cref="T:MvvmFx.Common.ViewModels.Factories.CreateCriteria"/>
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1">
            <summary>
            Base ViewModelCommandAsync is a generic class that inherits from 
            <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/> and allows ViewModel-level 
            functionality to execute asynchronusly when the commmand is executed.
            </summary>
            <typeparam name="TViewModel">The type of the  view model associated to the command.</typeparam>
            <summary>
            Base ViewModelCommandAsync is a generic class that inherits from 
            <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/> and allows ViewModel-level 
            functionality to execute asynchronusly when the commmand is executed.
            </summary>
            <typeparam name="TViewModel">The type of the  view model associated to the command.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1" -->
        <member name="F:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1.viewModel">
            <summary>
            The view model field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1"/> class.
            </summary>
            <param name="viewModel">The view model associated to the command.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1.ViewModel">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommand`1.ViewModel"/> property.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1._worker">
            <summary>
            Background worker to perform the asynch task.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1._dispatcher">
            <summary>
            Current dispatcher to ensure that we are executing on the right task.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1"/> class.
            </summary>
            <param name="viewModel">The viewmodel associated to this document action view model command.</param>
            <param name="name">The name of the action.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnExecute(System.Object)">
            <summary>
            Override the on execute to perform the action asynchronusly.
            </summary>
            <param name="parameter">The paramtere passed to the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnCanExecute(System.Object)">
            <summary>
            Override the can execute to determine if the operation can be executed.
            </summary>
            <returns>If the command can be executed.</returns>
            <param name="parameter">The parameter passed to the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnExecuteAsync(System.Object)">
            <summary>
            Override in derived class to provide the operation to execute.
            </summary>
            <param name="parameter">The parameter passed to the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.CancelAsync">
            <summary>
            Cancel async the operation.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.UpdateProgress(System.Int32,System.Int32)">
            <summary>
            Update the specified background _worker's progress.
            </summary>
            <param name="current">The current task out of a total number of tasks.</param>
            <param name="total">The total tasks to perform.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.CalculateCompletedPercentage(System.Int32,System.Int32)">
            <summary>
            Calcualtes the current progress.
            </summary>
            <param name="current">The current progress.</param>
            <param name="total">The total progress.</param>
            <returns>The completed percentate </returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnStarted">
            <summary>
            On the started async operation.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnCancelled">
            <summary>
            On the async operation cancelled, inform the listening object(s).
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnFailed">
            <summary>
            On the async operation failed, inform the listening object(s).
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnCompleted">
            <summary>
            On the async operation completed, inform the listening object(s).
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnProgressChanged(System.Int32)">
            <summary>
            On the async operation progress changed, inform the listening object(s).
            </summary>
            <param name="currentProgress">The current async operation progress.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.TidyBackgroundWorker">
            <summary>
             Dispose of the background worker performing.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1._disposed">
            <summary>
            If to dispose state field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Dispose">
            <summary>
            Clean up resources.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Dispose(System.Boolean)">
            <summary>
            Clean up resources.
            </summary>
            <param name="disposing">If disposing.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.DoWork(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Occurs when the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> changes. Perform the operation.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.DoWorkEventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnWorkerProgressChanged(System.Object,System.ComponentModel.ProgressChangedEventArgs)">
            <summary>
            Occurs when the <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged"/> changes. Report the current progress.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.ProgressChangedEventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.OnRunWorkerCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Occurs when the <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted"/> changes. Notify of any errors, cancelation or 
            completion of the operation.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs"/> event fired.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "E:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Started" -->
        <!-- Badly formed XML comment ignored for member "E:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Completed" -->
        <!-- Badly formed XML comment ignored for member "E:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Failed" -->
        <!-- Badly formed XML comment ignored for member "E:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Cancelled" -->
        <!-- Badly formed XML comment ignored for member "E:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.ProgressChanged" -->
        <member name="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.IsBusy">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.IsBusy"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.IsCancelPending">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.IsCancelPending"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Name">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.ViewModelCommandAsync`1.Name"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand">
            <summary>
            A class that implements <see cref="T:System.Windows.Input.ICommand"/> by deriving from <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/>,
            and adds the functionality to specify a <see cref="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand.SimpleEventHandler"/> and a <see cref="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand.CanExecuteEventHandler"/>
            to invoke for the Execute and CanExecute logic of the command.
            </summary>
            <example>
            <code>
            var addDocuments = new DelegateCommand(AddDocuments,
                                                   HasDocuments);
            </code>
            </example>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.DelegateCommand.executeHandler">
            <summary>
            The Execute handler.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.DelegateCommand.canExecuteHandler">
            <summary>
            The CanExecute handler
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.DelegateCommand.#ctor(MvvmFx.Common.ViewModels.Commands.DelegateCommand.SimpleEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand"/> class.
            </summary>
            <param name="executeHandler">The executed handler to attach for the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.DelegateCommand.#ctor(MvvmFx.Common.ViewModels.Commands.DelegateCommand.SimpleEventHandler,MvvmFx.Common.ViewModels.Commands.DelegateCommand.CanExecuteEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand"/> class.
            </summary>
            <param name="executeHandler">The executed handler to attach for the command.</param>
            <param name="canExecuteHandler">The can execute handler to attach for the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.DelegateCommand.OnExecute(System.Object)">
            <summary>
            Execute the unit of logic for the command.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.DelegateCommand.OnCanExecute(System.Object)">
            <summary>
            Determin if the command can execute.
            </summary>
            <returns>If the command can be executed.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand.SimpleEventHandler">
            <summary>
            The SimpleEventHandler type handler.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.DelegateCommand.CanExecuteEventHandler">
            <summary>
            Can CanExecuteEventHandler type handler.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.NextStepCommand">
            <summary>
            Command to show the next step
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ExtensionMethods.ListExtensionMethods">
            <summary>
            Static utility class containing extensions for lists.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MvvmFx.Common.ExtensionMethods.ListExtensionMethods.FindAll``1(System.Collections.Generic.List{``0},System.Predicate{``0})" -->
        <member name="M:MvvmFx.Common.ExtensionMethods.ListExtensionMethods.ContainsAny(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Returns whether the list contains any of the specified items
            </summary>
            <param name="source">The list to check in</param>
            <param name="items">The items to check for</param>
            <returns>true if the source list contains at least one item from the items, false otherwise</returns>
        </member>
        <member name="T:MvvmFx.Common.DataTemplateSelector.DataTemplateSelectorBase">
            <summary>
            The DataTemplateSelectorBase class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.DataTemplateSelector.DataTemplateSelectorBase.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Select the data template applicable to the specified item.
            </summary>
            <param name="item">The item to determine the associated data template.</param>
            <param name="container">The container which consists of the data templates to select from.</param>
            <returns>The data template associated to the specified item.</returns>
        </member>
        <member name="T:MvvmFx.Common.Converters.NullToVisibilityConverter">
            <summary>
            A type converter for visibility and null datacontext values
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ProgressEventArgs">
            <summary>
            The ProgressEventArgs inherts from EventArgs and 
            reports the _current progress or performing some task.  
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ProgressEventArgs"/> class.
            </summary>
            <param name="current">The _current progres.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.ProgressEventArgs.Current">
            <summary>
            Property Current (int)
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod.Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value.</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.</remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.ToString">
            <summary>
            Returns the name of the method implementing the rule
            and the property, field or column name to which the
            rule applies.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.#ctor(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.#ctor(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs,System.Int32)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="priority">
            Priority for processing the rule (smaller numbers have higher priority, default=0).
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2">
            <summary>
            Tracks all information for a rule.
            </summary>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.ToString">
            <summary>
            Returns the name of the method implementing the rule
            and the property, field or column name to which the
            rule applies.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.#ctor(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{`0,`1},`1)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.#ctor(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{`0,`1},`1,System.Int32)">
            <summary>
            Creates and initializes the rule.
            </summary>
            <param name="handler">The address of the method implementing the rule.</param>
            <param name="args">A RuleArgs object.</param>
            <param name="priority">
            Priority for processing the rule (smaller numbers have higher priority, default=0).
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.MvvmFx#Common#ViewModels#Behaviors#Validation#IRuleMethod#Invoke(System.Object)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>True if the data is valid, False if the data is invalid.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.Invoke(`0)">
            <summary>
            Invokes the rule to validate the data.
            </summary>
            <returns>
            <see langword="true" /> if the data is valid, 
            <see langword="false" /> if the data is invalid.
            </returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.Priority">
            <summary>
            Gets the priority of the rule method.
            </summary>
            <value>The priority value</value>
            <remarks>
            Priorities are processed in descending
            order, so priority 0 is processed
            before priority 1, etc.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.RuleName">
            <summary>
            Gets the name of the rule.
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.MvvmFx#Common#ViewModels#Behaviors#Validation#IRuleMethod#RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleMethod`2.RuleArgs">
            <summary>
            Returns the name of the field, property or column
            to which the rule applies.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelSaver`1">
            <summary>
            Abstract base class for a XxxSaver.
            This object saves the state of a ViewModel to the business objects in the model.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.IViewModelSaver.Save(MvvmFx.Common.ViewModels.ViewModelBase)">
            <summary>
            Saves the state of the ViewModel back to the corresponding bussiness objects
            in the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.IViewModelSaver`1.Save(`0)">
            <summary>
            Saves the state of the ViewModel back to the corresponding business objects
            in the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelSaver`1.Save(`0)">
            <summary>
            Saves the state of the ViewModel back to the corresponding bussiness objects
            in the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelSaver`1.OnSave(`0)">
            <summary>
            Override in derived classes to save the data in the ViewModel back to the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities">
            <summary>
            Contains utility methods used by the
            CSLA .NET framework.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities.IsNumeric(System.Object)">
            <summary>
            Determines whether the specified
            value can be converted to a valid number.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities.CallByName(System.Object,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CallType,System.Object[])">
            <summary>
            Allows late bound invocation of
            properties and methods.
            </summary>
            <param name="target">Object implementing the property or method.</param>
            <param name="methodName">Name of the property or method.</param>
            <param name="callType">Specifies how to invoke the property or method.</param>
            <param name="args">List of arguments to pass to the method.</param>
            <returns>The result of the property or method invocation.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities.GetPropertyType(System.Type)">
            <summary>
            Returns a property's type, dealing with
            Nullable(Of T) if necessary.
            </summary>
            <param name="propertyType">Type of the
            property as returned by reflection.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities.GetChildItemType(System.Type)">
            <summary>
            Returns the type of child object
            contained in a collection or list.
            </summary>
            <param name="listType">Type of the list.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.CallType">
            <summary>
            Valid options for calling a property or method
            via the <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Validation.Utilities.CallByName(System.Object,System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.CallType,System.Object[])"/> method.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CallType.Get">
            <summary>
            Gets a value from a property.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CallType.Let">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CallType.Method">
            <summary>
            Invokes a method.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.CallType.Set">
            <summary>
            Sets a value into a property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription">
            <summary>
            Parses a rule:// URI to provide
            easy access to the parts of the URI.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.#ctor(System.String)">
            <summary>
            Creates an instance of the object
            by parsing the provided rule:// URI.
            </summary>
            <param name="ruleString">The rule:// URI.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.Parse(System.String)">
            <summary>
            Parses a rule:// URI.
            </summary>
            <param name="ruleString">
            Text representation of a rule:// URI.</param>
            <returns>A populated RuleDescription object.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.Scheme">
            <summary>
            Gets the scheme of the URI 
            (should always be rule://).
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.MethodTypeName">
            <summary>
            Gets the name of the type containing
            the rule method.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.MethodName">
            <summary>
            Gets the name of the rule method.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.PropertyName">
            <summary>
            Gets the name of the property with which
            the rule is associated.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleDescription.Arguments">
            <summary>
            Gets a Dictionary containing the
            name/value arguments provided to
            the rule method.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager">
            <summary>
            Provides an implementation so that you can use the
            "weak event listener" pattern to attach listeners
            for the <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)"/> event.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
            <summary>
            Adds the specified listener to the list of listeners on the specified source.
            </summary>
            <param name="source">The object with the event.</param>
            <param name="listener">The object to add as a listener.</param>
            <param name="propertyName">The name of the property that exists on
            source upon which to listen for changes.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
            <summary>
            Removes the specified listener from the list of listeners on the
            specified source.
            </summary>
            <param name="source">The object with the event.</param>
            <param name="listener">The object to remove as a listener.</param>
            <param name="propertyName">The name of the property that exists
            on source upon which to listen for changes.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.StartListening(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Begin listening for the <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)"/> event on
            the provided source.
            </summary>
            <param name="source">The object on which to start listening
            for <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)"/>.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.StopListening(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Stop listening for the <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)"/> event on the
            provided source.
            </summary>
            <param name="source">The object on which to start listening for
            <see cref="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)"/>.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The method that handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="args">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> that
            contains the event data.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PrivateAddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
            <summary>
            Private method to add the specified listener to the list of listeners
            on the specified source.
            </summary>
            <param name="source">The object with the event.</param>
            <param name="listener">The object to add as a listener.</param>
            <param name="propertyName">The name of the property that exists
            on source upon which to listen for changes.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.PrivateRemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
            <summary>
            Private method to remove the specified listener from the list of listeners
            on the specified source.
            </summary>
            <param name="source">The object with the event.</param>
            <param name="listener">The object to remove as a listener.</param>
            <param name="propertyName">The name of the property that exists on
            source upon which to listen for changes.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager.Instance">
            <summary>
            Get the current instance of <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyChangedEventManager"/>
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3">
            <summary>
            Implements a weak event listener that allows the owner to be garbage
            collected if its only remaining link is an event handler.
            </summary>
            <typeparam name="TInstance">Type of rootInstance listening for the event.</typeparam>
            <typeparam name="TSource">Type of source for the event.</typeparam>
            <typeparam name="TEventArgs">Type of event arguments for the event.</typeparam>
        </member>
        <member name="T:MvvmFx.Common.Helpers.WeakEventing.WeakEventListenerBase">
            <summary>
            Provides a non-generic base class for the WeakEventListener implementation.
            The main reason is to get easier reading code in the WeakEventSourceBase implementation. 
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3._weakInstance">
            <summary>
            WeakReference to the rootInstance listening for the event.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3._source">
            <summary>
            To hold a reference to source object. With this instance the WeakEventListener 
            // can guarantee that the handler get unregistered when listener is released.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3._onEventAction">
            <summary>
            Delegate to the method to call when the event fires.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3._onDetachAction">
            <summary>
            Delegate to the method to call when detaching from the event.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3.#ctor(`0,`1)">
            <summary>
            Initializes a new instances of the WeakEventListener class.
            </summary>
            <param name="rootInstance">Instance subscribing to the event.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3.OnEvent(System.Object,`2)">
            <summary>
            Handler for the subscribed event calls OnEventAction to handle it.
            </summary>
            <param name="source">Event source.</param>
            <param name="eventArgs">Event arguments.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3.Detach">
            <summary>
            Detaches from the subscribed event.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3.OnEventAction">
            <summary>
            Gets or sets the method to call when the event fires.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Helpers.WeakEventing.WeakEventListener`3.OnDetachAction">
            <summary>
            Gets or sets the method to call when detaching from the event.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.GuidHelper">
            <summary>
            Static utility class with methods for manipulating guids
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.GuidHelper.ToString(System.Guid)">
            <summary>
            Converts a guid to a string, using a consistent format
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.Converters.InvertedBoolToVisibilityConverter">
            <summary>
            A type converter for visibility and boolean values
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.EnumHelper">
            <summary>
            An EnumHelper class designed to provide 
            helper methods related to Enum's.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.EnumHelper.Parse``1(System.String)">
            <summary>
            Convert a string value to an enum of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>
            Convert a string value to an enum of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.EnumHelper.GetEnumValues``1">
            <summary>
            Get all the values for a given enum T.
            </summary>
            <typeparam name="T">The type of enum.</typeparam>
            <returns>The list of values for the enum T.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.EnumHelper.GetEnumStrings``1">
            <summary>
            Get all the values for a given enum T.
            </summary>
            <typeparam name="T">The type of enum.</typeparam>
            <returns>The list of values for the enum T.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules">
            <summary>
             ValidationRules class is designed to provide support 
             to validate rules applied against properties of the 
             ViewModel object. 
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.GetRuleDescriptions">
            <summary>
            Returns an array containing the text descriptions of all
            validation rules associated with this object.
            </summary>
            <returns>String array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule``1(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs},System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <typeparam name="T">Type of the business object to be validated.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule``1(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs},System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
            <typeparam name="T">Type of the business object to be validated.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule``2(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,``1},``1)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddInstanceRule``2(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,``1},``1,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule``1(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs},System.String)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule``1(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs},MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule``1(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs},System.String,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            <para>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </para><para>
            The propertyName may be used by the method that implements the rule
            in order to retrieve the value to be validated. If the rule
            implementation is inside the target object then it probably has
            direct access to all data. However, if the rule implementation
            is outside the target object then it will need to use reflection
            or CallByName to dynamically invoke this property to retrieve
            the value to be validated.
            </para>
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="propertyName">
            The property name on the target object where the rule implementation can retrieve
            the value to be validated.
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleArgs,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule``2(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,``1},``1)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddRule``2(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler{``0,``1},``1,System.Int32)">
            <summary>
            Adds a rule to the list of rules to be enforced.
            </summary>
            <remarks>
            A rule is implemented by a method which conforms to the 
            method signature defined by the RuleHandler delegate.
            </remarks>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="handler">The method that implements the rule.</param>
            <param name="args">
            A RuleArgs object specifying the property name and other arguments
            passed to the rule method
            </param>
            <param name="priority">
            The priority of the rule, where lower numbers are processed first.
            </param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddDependentProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the depandent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddDependantProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependantPropertyName">
            The name of the depandent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddDependentProperty(System.String,System.String,System.Boolean)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the depandent property.
            </param>
            <param name="isBidirectional">
            If <see langword="true"/> then a 
            reverse dependancy is also established
            from dependentPropertyName to propertyName.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property. If isBidirectional is 
            <see langword="true"/> then an additional association
            is set up so when rules are checked for
            dependentPropertyName the rules for propertyName
            will also be checked.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.AddDependantProperty(System.String,System.String,System.Boolean)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependantPropertyName">
            The name of the depandent property.
            </param>
            <param name="isBidirectional">
            If <see langword="true"/> then a 
            reverse dependancy is also established
            from dependantPropertyName to propertyName.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property. If isBidirectional is 
            <see langword="true"/> then an additional association
            is set up so when rules are checked for
            dependantPropertyName the rules for propertyName
            will also be checked.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.CheckRules(System.String)">
            <summary>
            Invokes all rule methods associated with
            the specified property and any 
            dependent properties.
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.CheckRules">
            <summary>
            Invokes all rule methods for all properties
            in the object.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.CheckRules(System.Collections.Generic.IList{MvvmFx.Common.ViewModels.Behaviors.Validation.IRuleMethod})">
            <summary>
            Given a list
            containing IRuleMethod objects, this
            method executes all those rule methods.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.GetBrokenRules">
            <summary>
            Returns a reference to the readonly collection of broken
            business rules.
            </summary>
            <remarks>
            The reference returned points to the actual collection object.
            This means that as rules are marked broken or unbroken over time,
            the underlying data will change. Because of this, the UI developer
            can bind a display directly to this collection to get a dynamic
            display of the broken rules at all times.
            </remarks>
            <returns>A reference to the collection of broken rules.</returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.ProcessThroughPriority">
            <summary>
            Gets or sets the priority through which
            CheckRules should process before short-circuiting
            processing on broken rules.
            </summary>
            <value>Defaults to 0.</value>
            <remarks>
            All rules for each property are processed by CheckRules
            though this priority. Rules with lower priorities are
            only processed if no previous rule has been marked as
            broken.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.SuppressRuleChecking">
            <summary>
            Gets or sets a value indicating whether calling
            CheckRules should result in rule
            methods being invoked.
            </summary>
            <value>True to suppress all rule method invocation.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRules.IsValid">
            <summary>
            Returns a value indicating whether there are any broken rules
            at this time. 
            </summary>
            <returns>A value indicating whether any rules are broken.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StepViewModelBase.Save">
            <summary>
            Saves this page
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StepViewModelBase.Key">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StepViewModelBase.Key"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/> that may contain a
            <see cref="T:System.WeakReference"/> to the target. This class is used
            internally by the Composite Application Library.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.IDelegateReference">
            <summary>
            Represents a reference to a <see cref="T:System.Delegate"/>.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.IDelegateReference.Target">
            <summary>
            Gets the referenced <see cref="T:System.Delegate"/> object.
            </summary>
            <value>A <see cref="T:System.Delegate"/> instance if the target is valid; otherwise <see langword="null"/>.</value>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference.#ctor(System.Delegate)">
            <summary>
            Initializes a new instance of <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference"/>.
            </summary>
            <param name="delegate">The original <see cref="T:System.Delegate"/> to create a reference for.</param>
            <exception cref="T:System.ArgumentNullException">If the passed <paramref name="delegate"/> is not assignable to <see cref="T:System.Delegate"/>.</exception>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference.Target">
            <summary>
            Gets the <see cref="T:System.Delegate"/> (the target) referenced by the current <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference"/> object.
            </summary>
            <value><see langword="null"/> if the object referenced by the current <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference"/> object has been garbage collected; otherwise, a reference to the <see cref="T:System.Delegate"/> referenced by the current <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.DelegateReference"/> object.</value>
        </member>
        <member name="T:MvvmFx.Common.Helpers.WeakEventing.CollectionSource`1">
            <summary>
            TODO - get remove presenters and sources when disposed
            </summary>
            <typeparam name="ItemType"></typeparam>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.CollectionSource`1.Dispose">
            <summary>
            The Dispose method
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.WeakEventing.CollectionSource`1.Dispose(System.Boolean)">
            <summary>
            The protected virtual dispose that removes the handlers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.DateHelper">
            <summary>
            Static utility functions for manipulating and using Dates.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.GetExactMonths(System.DateTime,System.DateTime)">
            <summary>
            Used to get number of months modification for impact changes to entry or exit criteria
            </summary>
            <param name="date1"></param>
            <param name="date2"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.IsStartOfYear(System.DateTime)">
            <summary>
            Examines the month and day of a <see cref="T:System.DateTime"/> object to
            see if it represents the first day of a year.
            </summary>
            <param name="date">The date to test.</param>
            <returns>If the date's month is 1 (January) and the day is 1, the 
            method return true, otherwise false.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.RetainMonthEnd(System.DateTime,System.DateTime)">
            <summary>
            This method snaps the new date to the end of the month, if the original date was at the end of a month.
            </summary>
            <param name="origDate"></param>
            <param name="newDate"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.ToString(System.DateTime)">
            <summary>
            Converts a date to Universal Time format.
            Use this to write dates to Xml, to avoid localisation issues with different cultures.
            E.g. 31/12/2008 becomes "2008-12-31 00:00:00Z"
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.ToString(System.String)">
            <summary>
            Converts a non-UTC string representation of a Date, to a UTC version
            </summary>
            <param name="dateString"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.ToString(System.Object)">
            <summary>
            Converts a non-UTC string or Date representation of a Date, to a UTC version
            </summary>
            <param name="dateObject"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.IsDateTimeDefaultDate(System.Nullable{System.DateTime})">
            <summary>
            Determine if the current date and time is a default.
            </summary>
            <param name="currentDate">The current date time to check.</param>
            <returns>If the date time is a default one.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.DateHelper.IsValidDateType(System.String)">
            <summary>
            Determine if the current string date 
            repersentation can be converted to a date format.
            </summary>
            <param name="date">The specified date.</param>
            <returns>If the string repersentation of the date value is valid.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1">
            <summary>
            Abstract base class for <see cref="T:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1"/> objects.
            Creates an instance of a <see cref="T:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1"/> class and populates 
            it with the data from the model.
            </summary>
            <remarks>
            An <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> abstracts and encapsulates the logic for
            creating and loading a <see cref="T:MvvmFx.Common.ViewModels.Factories.ICreateCriteria"/> object and hydrating it with
            data from the model.
            The overloaded Create method can take an <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object
            to specify context-specific data about which model objects to load from.
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1">
            <summary>
            Creates and returns a <see cref="T:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1"/> object with data from the model.
            </summary>
            <remarks>
            An <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> abstracts and encapsulates the logic for
            creating and loading a <see cref="T:MvvmFx.Common.ViewModels.Factories.ICreateCriteria"/> object and hydrating it with
            data from the model.
            The overloaded Create method can take an <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object
            to specify context-specific data about which model objects to load from.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1.Create">
            <summary>
            Creates and returns a ViewModel object with data from the model.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.IViewModelFactory`1.Create(MvvmFx.Common.ViewModels.Factories.ICreateCriteria)">
            <summary>
            Creates and returns a <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object with data from the model,
            using the <see cref="T:MvvmFx.Common.ViewModels.Factories.ICreateCriteria"/> to find it
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1.Create">
            <summary>
            Creates and loads an existing <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object of type T with data from the model.
            </summary>
            <returns>The <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object of type T</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1.Create(MvvmFx.Common.ViewModels.Factories.ICreateCriteria)">
            <summary>
            Creates and loads an existing <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object of type T with data from the model.
            Uses the criteria parameter to determine which model data to load.
            </summary>
            <param name="criteria">The criteria to use to load the data from the model</param>
            <returns>The <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> object of type T</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1.OnCreate">
            <summary>
            Override in derived classes to load an existing ViewModel object.
            </summary>
            <remarks>Do not call base.OnCreate()</remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Factories.ViewModelFactory`1.OnCreate(MvvmFx.Common.ViewModels.Factories.ICreateCriteria)">
            <summary>
            Override in derived classes to load an existing ViewModel object.
            </summary>
            <remarks>Do not call base.OnCreate(criteria)</remarks>
        </member>
        <member name="T:MvvmFx.Common.Helpers.AnimationHelper">
            <summary>
            The AnimationHelper class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AnimationHelper.CreateAnimation(System.Windows.Media.Animation.Storyboard,System.Windows.DependencyObject,System.String,System.Windows.Media.Animation.PointAnimation)">
            <summary>
            Creates an animation.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="target">The target element.</param>
            <param name="targetProperty">The target property.</param>
            <param name="pointAnim">The point to animate between.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AnimationHelper.CreateAnimation(System.Windows.Media.Animation.Storyboard,System.Windows.DependencyObject,System.String,System.Windows.Media.Animation.PointAnimation,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Creates an animation.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="target">The target element.</param>
            <param name="targetProperty">The target property.</param>
            <param name="pointAnim">The point to animate between.</param>
            <param name="easingFunction">The easing fusion applied to the animation.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AnimationHelper.CreateAnimation(System.Windows.Media.Animation.Storyboard,System.Windows.DependencyObject,System.String,System.Windows.Media.Animation.DoubleAnimation)">
            <summary>
            Creates an animation.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="target">The target element.</param>
            <param name="targetProperty">The target property.</param>
            <param name="doubleAnim">The double values to animate between.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AnimationHelper.CreateAnimation(System.Windows.Media.Animation.Storyboard,System.Windows.DependencyObject,System.String,System.Windows.Media.Animation.DoubleAnimation,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Creates an animation.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="target">The target element.</param>
            <param name="targetProperty">The target property.</param>
            <param name="doubleAnim">The double values to animate between.</param>
            <param name="easingFunction">The easing fusion applied to the animation.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.AnimationHelper.CreateAnimation(System.Windows.Media.Animation.Storyboard,System.Windows.DependencyObject,System.String,System.Windows.Media.Animation.PointAnimationUsingKeyFrames)">
            <summary>
            Creates an animation.
            </summary>
            <param name="storyboard">The storyboard.</param>
            <param name="target">The target element.</param>
            <param name="targetProperty">The target property.</param>
            <param name="anim">The point between a number of key frames.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ItemsEventArgs`1">
            <summary>
            The ItemsEventArgs&lt;T&gt; class.
            </summary>
            <typeparam name="T">The argument &lt;T&gt; restricted to the base <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> class.</typeparam>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemsEventArgs`1.items">
            <summary>
            The items&lt;T&gt; field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ItemsEventArgs`1.#ctor(System.Collections.ObjectModel.Collection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ItemsEventArgs`1"/> class.
            </summary>
            <param name="items">The items&lt;T&gt; to add to the event args.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemsEventArgs`1.Items">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.ItemsEventArgs`1.Items"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1">
            <summary>
            The ItemPropertyChangedEventArgs class.
            </summary>
            <typeparam name="T">The argument &lt;T&gt; restricted to the base <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> class.</typeparam>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1.item">
            <summary>
            The item&lt;T&gt; field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1.#ctor(`0,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1"/> class.
            </summary>
            <param name="item">The item&lt;T&gt; to add to the argument.</param>
            <param name="propertyName">The property name to add to the argument.</param>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1.Item">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.ItemPropertyChangedEventArgs`1.Item"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity.Error">
            <summary>
            Represents a serious
            business rule violation that
            should cause an object to
            be considered invalid.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity.Warning">
            <summary>
            Represents a business rule
            violation that should be
            displayed to the user, but which
            should not make an object be
            invalid.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity.Information">
            <summary>
            Represents a business rule
            result that should be displayed
            to the user, but which is less
            severe than a warning.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateSaver`1">
            <summary>
            Abstract base StateSaver class to save the properties of a ProfileStae
            object to the object being edited
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateSaver`1.#ctor">
            <summary>
            Create a StateSaver
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateSaver`1.Save(`0)">
            <summary>
            Save the profile page object, using the data in the manager's State
            </summary>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelLoader`1">
            <summary>
            Abstract base class for ViewModelLoader objects.
            Creats an instance of a ViewModel class and populates with the data from the model.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelLoader`1.Load(`0)">
            <summary>
            Loads an existing ViewModel object with data from the model.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.LoadingSaving.ViewModelLoader`1.OnLoad(`0)">
            <summary>
            Override in derived classes to load an existing ViewModel object.
            </summary>
            <param name="viewModel"></param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.SilverlightVisualTreeHelper.FindVisualObjectByTypeVisualHelper``1(System.Windows.DependencyObject)">
            <summary>
            Finds the first occurence of the visual child object by the specified type.
            </summary>
            <typeparam name="T">The type of the object to find.</typeparam>
            <param name="obj">The dependency object that you wish to find the child object type from.</param>
            <returns>The first occurence of the visual child object found.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.SilverlightVisualTreeHelper.TryFindParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds a parent of a given item on the visual tree.
            </summary>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="child">A direct or indirect child of the
            queried item.</param>
            <returns>The first parent item that matches the submitted
            type parameter. If not matching item can be found, a null
            reference is being returned.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateLoader`1">
            <summary>
            Abstract base class for loading profile state objects with the
            data from the object being profiled and the current simulation context.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateLoader`1.Load(`0)">
            <summary>
            Load the profile page object, using the data in the manager's State
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.StateLoader`1.OnLoad(`0)" -->
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessState">
            <summary>
            The Abstract Base class for all ProfileStateObjects.
            Contains the common properties to all objects.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessState.IsModified">
            <summary>
            Gets or sets whether the state is modified
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.TransitionHelper.DEFAULT_SLIDE_DURATION">
            <summary>
            The default slide duration applied.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.FadeIn(System.Windows.FrameworkElement)">
            <summary>
            Fade in the specified <see cref="T:System.Windows.Controls.UserControl"/>
            </summary>
            <param name="fadeIn"></param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.FadeIn(System.Windows.FrameworkElement,System.Windows.Media.Animation.IEasingFunction)">
            <summary>
            Fade in the specified <see cref="T:System.Windows.Controls.UserControl"/>.  
            </summary>
            <param name="fadeIn">The control to fade in.</param>
            <param name="easingFunction">The easing function applied to the animation.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.FadeOut(System.Windows.FrameworkElement,System.EventHandler)">
            <summary>
            Fade the specified control out.  
            </summary>
            <param name="fadeOut">The control to fade out.</param>
            <param name="callback">The callback when the control has completed fading out.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.FadeOut(System.Windows.FrameworkElement,System.Windows.Media.Animation.IEasingFunction,System.EventHandler)">
            <summary>
            Fade the specified control out.  
            </summary>
            <param name="fadeOut">The control to fade out.</param>
            <param name="easingFunction">The easing function applied to the animation.</param>
            <param name="callback">The callback when the control has completed fading out.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.Slide(System.Windows.FrameworkElement,System.Double)">
            <summary>
            Slide to <see cref="T:System.Windows.Controls.UserControl"/> to the specified left position.
            </summary>
            <param name="control">The control to slide.</param>
            <param name="to">The left position to slide to.</param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.TransitionHelper.Slide(System.Windows.Controls.UserControl,System.Windows.Media.Animation.IEasingFunction,System.Double)">
            <summary>
            Slide to <see cref="T:System.Windows.Controls.UserControl"/> to the specified left position.
            </summary>
            <param name="control">The control to slide.</param>
            <param name="easingFunction">The easing function applied to the animation.</param>
            <param name="to">The left position to slide to.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.SelectableViewModel">
            <summary>
            The SelectableViewModel class inherits from <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Observable.ObservableViewModel"/>
            and adds a public IsSelected property and SelectedChanged event.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.SelectableViewModel.isSelected">
            <summary>
            Indicate the isSelected state field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.SelectableViewModel"/> class.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.SelectableViewModel.OnSelectedChanged(System.EventArgs)">
            <summary>
            Occurs when the <see cref="M:MvvmFx.Common.ViewModels.SelectableViewModel.OnSelectedChanged(System.EventArgs)"/> changes.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> event fired.</param>
        </member>
        <member name="E:MvvmFx.Common.ViewModels.SelectableViewModel.SelectedChanged">
            <summary>
            The SelectedChanged event of type EventHandler. 
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.SelectableViewModel.IsSelected">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.SelectableViewModel.IsSelected"/> property.
            </summary>
            <value>If isSelected.</value>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.ViewModelCollection">
            <summary>
            Default ViewModelCollection - collection of <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> classes
            </summary>
            <remarks>
            Inherits from <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> and adds events for
            ItemAdded, ItemRemoved, ItemMoved, and ItemRemoving, also adds public methods
            for accessing and manipulating <see cref="T:MvvmFx.Common.ViewModels.ViewModelBase"/> items
            by their Key property.
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.ActionCommand">
            <summary>
            A class that implements <see cref="T:System.Windows.Input.ICommand"/> by deriving from <see cref="T:MvvmFx.Common.ViewModels.Commands.ViewModelCommand"/>,
            and adds the functionality to specify an <see cref="T:System.Action`1"/> and a <see cref="T:System.Predicate`1"/>
            to invoke for the Execute and CanExecute logic of the command.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommand"/> class.
            </summary>
            <param name="execute">The execute.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommand.#ctor(System.Action{System.Object},System.Predicate{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmFx.Common.ViewModels.Commands.ActionCommand"/> class.
            </summary>
            <param name="execute">The action to invoken when the command is executed.</param>
            <param name="canExecute">The predicate to invoke when the CanExecute method is evaluated.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommand.OnExecute(System.Object)">
            <summary>
            Invokes the action
            </summary>
            <param name="parameter">The parameter required to execute a unit of logic.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.ActionCommand.OnCanExecute(System.Object)">
            <summary>
            Invokes the predicate to check if the command can be executed
            </summary>
            <param name="parameter">The object to be passed to the command can execute function.</param>
            <returns>If the command can be executed.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.SharedValidationRules">
            <summary>
            Maintains a list of all the per-type
            <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRulesManager"/> objects
            loaded in memory.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.SharedValidationRules.GetManager(System.Type,System.Boolean)">
            <summary>
            Gets the <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRulesManager"/> for the 
            specified object type, optionally creating a new instance 
            of the object if necessary.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <param name="create">Indicates whether to create
            a new instance of the object if one doesn't exist.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.SharedValidationRules.RulesExistFor(System.Type)">
            <summary>
            Gets a value indicating whether a set of rules
            have been created for a given <see cref="T:System.Type"/>.
            </summary>
            <param name="objectType">
            Type of business object for which the rules apply.
            </param>
            <returns><see langword="true"/> if rules exist for the type.</returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection">
            <summary>
            A collection of currently broken rules.
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.GetFirstBrokenRule(System.String)">
            <summary>
            Returns the first <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection"/> that corresponds
            to a specfic property on the object.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or null if 
            there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.GetFirstMessage(System.String)">
            <summary>
            Returns the first <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule"/> object
            corresponding to the specified property.
            </summary>
            <remarks>
            Code in a business object or UI can also use this value to retrieve
            the first broken rule in <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection"/> that corresponds
            to a specfic property.
            </remarks>
            <param name="property">The name of the property affected by the rule.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.GetFirstMessage(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Returns the first <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule"/> object
            corresponding to the specified property
            and severity.
            </summary>
            <param name="property">The name of the property affected by the rule.</param>
            <param name="severity">The severity of broken rule to return.</param>
            <returns>
            The first BrokenRule object corresponding to the specified property, or Nothing
            (null in C#) if there are no rules defined for the property.
            </returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToString(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToString(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <param name="severity">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToArray">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ToArray(MvvmFx.Common.ViewModels.Behaviors.Validation.RuleSeverity)">
            <summary>
            Returns a string array containing all broken
            rule descriptions.
            </summary>
            <param name="severity">The severity of rules
            to include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.CreateCollection">
            <summary>
            Gets an empty collection on which the Merge()
            method may be called to merge in data from
            other BrokenRuleCollection objects.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.Merge(System.String,MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection)">
            <summary>
            Merges data from the supplied list into this
            list, changing the rule names to be unique
            based on the source value.
            </summary>
            <param name="source">
            A unique source name for each list being
            merged into this master list.
            </param>
            <param name="list">
            A list to merge into this master list.
            </param>
            <remarks>
            This method is intended to allow merging of
            all BrokenRulesCollection objects in a business
            object graph into a single list. To this end,
            no attempt is made to remove duplicates during
            the merge process. Also, the source parameter
            value must be unqiue for each object instance
            in the graph, or rule name collisions may
            occur.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.ErrorCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Error.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.WarningCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Warning.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.InformationCount">
            <summary>
            Gets the number of broken rules in
            the collection that have a severity
            of Information.
            </summary>
            <value>An integer value.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRulesCollection.Revision">
            <summary>
            Gets the current revision number of
            the collection.
            </summary>
            <remarks>
            The revision value changes each time an
            item is added or removed from the collection.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageableViewModel.Dispose">
            <summary>
            The Dispose method
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageableViewModel.Dispose(System.Boolean)">
            <summary>
            The protected virtual dispose that removes the handlers
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.MappedProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MappedProperty.Targets">
            <summary>
            Gets the value of the <see cref="!:"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.ShortcutKeysManager">
            <summary>
            Class to handle the KeyDown event of a UIElement and register
            Key combinations to actions or commands.
            </summary>
            <example>
            The following example creates a ShortcutKeyManager for a UIElement and
            registers a command and an action against certain key press combinations:
            <code>
                   var shortcutKeyManager =
                          new ShortcutKeysManager(this)
                             .Register(viewModel.CancelCommand, Key.Escape)
                             .Register(() => viewModel.AddSelected.Execute(), Key.W, ModifierKeys.Control, ModifierKeys.Shift);
            </code>
            </example>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ShortcutKeysManager.#ctor(System.Windows.UIElement)">
            <summary>
            Creates a new ShortcutKeysManager for the specified UIElement.
            </summary>
            <param name="uiElement"></param>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ShortcutKeysManager.Register(System.Action,System.Windows.Input.Key,System.Windows.Input.ModifierKeys[])">
            <summary>
            Register an action that should be invoked when the specified key combination is pressed.
            </summary>
            <param name="action">The action to invoke</param>
            <param name="key">The key press to respond to</param>
            <param name="modifierKeys">The collection of modifier keys, if any, that must
            also be pressed to invoke the action</param>
            <returns>returns this ShortcutKeysManager object to allow a fluent interface. </returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ShortcutKeysManager.Register(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys[])">
            <summary>
            Register a command that should be executed when the specified key combination is pressed.
            </summary>
            <param name="command">The command to execute</param>
            <param name="key">The key press to respond to</param>
            <param name="modifierKeys">The collection of modifier keys, if any, that must
            also be pressed to execute the command</param>
            <returns>returns this ShortcutKeysManager object to allow a fluent interface. </returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ShortcutKeysManager.ControlKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            The event handler for the uiElement's KeyDown event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:MvvmFx.Common.Helpers.ShortcutKeysManager.ShortcutKeyMapping">
            <summary>
            Private placeholder class to store the mapping
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ExtensionMethods.ExpressionExtensions">
            <summary>
            Static utility class containined extension methods for Expressions
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ExtensionMethods.ExpressionExtensions.PropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets th member name of the expression
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="projection"></param>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule">
            <summary>
            Stores details about a specific broken business rule.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule.RuleName">
            <summary>
            Provides access to the name of the broken rule.
            </summary>
            <value>The name of the rule.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule.Description">
            <summary>
            Provides access to the description of the broken rule.
            </summary>
            <value>The description of the rule.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule.Property">
            <summary>
            Provides access to the property affected by the broken rule.
            </summary>
            <value>The property affected by the rule.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Validation.BrokenRule.Severity">
            <summary>
            Gets the severity of the broken rule.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Messaging.IMessageSubscription.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="!:IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> or <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="!:InvokeAction"/>. The returned
            delegate holds hard references to the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> and <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> and <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.GetExecutionStrategy">
            <summary>
            Gets the execution strategy to publish this event.
            </summary>
            <returns>An <see cref="T:System.Action`1"/> with the execution strategy, or <see langword="null"/> if the <see cref="!:IEventSubscription"/> is no longer valid.</returns>
            <remarks>
            If <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> or <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> are no longer valid because they were
            garbage collected, this method will return <see langword="null"/>.
            Otherwise it will return a delegate that evaluates the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> and if it
            returns <see langword="true"/> will then call <see cref="!:InvokeAction"/>. The returned
            delegate holds hard references to the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> and <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> target
            <see cref="T:System.Delegate">delegates</see>. As long as the returned delegate is not garbage collected,
            the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action"/> and <see cref="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter"/> references delegates won't get collected either.
            </remarks>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Action">
            <summary>
            Gets the target <see cref="T:System.Action`1"/> that is referenced by the <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Action`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.Messaging.MessageSubscription`1.Filter">
            <summary>
            Gets the target <see cref="T:System.Predicate`1"/> that is referenced by the <see cref="T:MvvmFx.Common.ViewModels.Behaviors.Messaging.IDelegateReference"/>.
            </summary>
            <value>An <see cref="T:System.Predicate`1"/> or <see langword="null"/> if the referenced target is not alive.</value>
        </member>
        <member name="T:MvvmFx.Common.Helpers.XmlSerializerHelper">
            <summary>
            Static helper class for serializing objects to/from XML
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.XmlSerializerHelper.ToXml``1(``0)">
            <summary>
            Serialize the data object to an XML string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.XmlSerializerHelper.FromXml``1(System.String)">
            <summary>
            Deserialize the XML string to a data object of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="T:MvvmFx.Common.Converters.InvertedBoolToBoolConverter">
            <summary>
            A type converter for visibility and boolean values
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior">
            <summary>
            Silverlight Behavior to begin a storyboard after a command executes
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandPathProperty">
            <summary>
            The <see cref="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandPathProperty"/> dependency property registered with the 
            Silverlight property system.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.StoryboardProperty">
            <summary>
            The <see cref="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.StoryboardProperty"/> dependency property registered with the 
            Silverlight property system.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandTypeProperty">
            <summary>
            The <see cref="F:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandTypeProperty"/> dependency property registered with the 
            Microsoft Presentation Foundation (WPF) property system.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandPath">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandPath"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.Storyboard">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.Storyboard"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandType">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Commands.StoryboardCommandHandlerBehavior.CommandType"/> property.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:MvvmFx.Common.ViewModels.Commands.Commands" -->
        <member name="F:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehaviorProperty">
            <summary>
            Atached dependency propety to set the command behavior.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.Commands.CommandProperty">
            <summary>
            Atached dependency propety to enable a command to be attached to a control .
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.GetCommand(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Gets the command attched to the button.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.SetCommand(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Input.ICommand)">
            <summary>
            Set the command for the associated button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">The button control.</param>
            <param name="value">The command to attach to the button.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the <see cref="T:System.Windows.DependencyObject"/> changes. Sets the command behavior for the specified 
            button control.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> object associated to the attached dependency property.</param>
            <param name="e">The <see cref="T:MvvmFx.Common.ViewModels.Commands.Command"/> event fired.</param>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Commands.Commands.CommandParameterProperty">
            <summary>
            Attached property to define the parameters to be passed to the command when executed.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.GetCommandParameter(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Get the command parameter for the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> to set the command parameters.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.SetCommandParameter(System.Windows.Controls.Primitives.ButtonBase,System.Object)">
            <summary>
            Sets the command parameters for the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.</param>
            <param name="value">The command parameter for button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.AttachCommand(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Input.ICommand)">
            <summary>
            Attaches the command for the specified button. 
            </summary>
            <param name="buttonBase">The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> to attach the command to.</param>
            <param name="command">The command <see cref="T:System.Windows.Input.ICommand"/> to be attached to the button.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.DetachCommand(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Detaches the command from the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> to remove the command from.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior">
            <summary>
            The CommandButtonBehavior class that provides the 
            behavior support for all button controls <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.#ctor(System.Windows.Controls.Primitives.ButtonBase,System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the <see cref="!:Infusion.Silverlight.Common.Commands.CommandButtonBehavior"/> class.
            </summary>
            <param name="buttonBase">The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> to attach the behavior to.</param>
            <param name="command">The command to attach to the command.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.Attach">
            <summary>
            Attach the button command to the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.Detach">
            <summary>
            Detach the command for the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.SetIsEnabled(System.Windows.Controls.Primitives.ButtonBase)">
            <summary>
            Set the enabled state of the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <param name="buttonBase">The button control to set the enabled state.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.GetElement">
            <summary>
            Get the button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.
            </summary>
            <returns>The button control <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/>.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.Command_CanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Occurs when the <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> changes. Set the enabled state for the command control.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> event fired.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Commands.Commands.CommandButtonBehavior.Button_Clicked(System.Object,System.EventArgs)">
            <summary>
            Occurs when the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click"/> changes. Execute the command 
            when the button control is clicked.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> object that fired the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> event fired.</param>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler">
            <summary>
            Delegate that defines the method signature for all rule handler methods.
            </summary>
            <param name="target">
            Object containing the data to be validated.
            </param>
            <param name="e">
            Parameter used to pass information to and from
            the rule method.
            </param>
            <returns>
            <see langword="true" /> if the rule was satisfied.
            </returns>
            <remarks>
            <para>
            When implementing a rule handler, you must conform to the method signature
            defined by this delegate. You should also apply the Description attribute
            to your method to provide a meaningful description for your rule.
            </para><para>
            The method implementing the rule must return 
            <see langword="true"/> if the data is valid and
            return <see langword="false"/> if the data is invalid.
            </para>
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.RuleHandler`2">
            <summary>
            Delegate that defines the method signature for all rule handler methods.
            </summary>
            <typeparam name="T">Type of the target object.</typeparam>
            <typeparam name="R">Type of the arguments parameter.</typeparam>
            <param name="target">
            Object containing the data to be validated.
            </param>
            <param name="e">
            Parameter used to pass information to and from
            the rule method.
            </param>
            <returns>
            <see langword="true" /> if the rule was satisfied.
            </returns>
            <remarks>
            <para>
            When implementing a rule handler, you must conform to the method signature
            defined by this delegate. You should also apply the Description attribute
            to your method to provide a meaningful description for your rule.
            </para><para>
            The method implementing the rule must return 
            <see langword="true"/> if the data is valid and
            return <see langword="false"/> if the data is invalid.
            </para>
            </remarks>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.ViewModelPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Event handler for the PropertyChanged event of the ViewModel
            object being tracked. This marks the ChangeService as being
            modified, and maintains hooks to a trackable child object if
            the TrackingMode is TrackChildren.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.MarkModified">
            <summary>
            Mark the object as being modified
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.MarkUnmodified">
            <summary>
            Marks the object as not being modified
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.DoMarkModified(System.Object,System.EventArgs)">
            <summary>
            Event handler for marking the object as modified.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.NewPropertyObserver">
            <summary>
            Return a new property observer for registering for
            property change notifcations on this object.
            </summary>
            <returns></returns>
        </member>
        <member name="F:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService._disposed">
            <summary>
            If to dispose state field.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ChangeTracking.ChangeService.IsModified">
            <summary>
            Gets whether the page has been modified since it was loaded
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.IdValuePair.Id">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.IdValuePair.Id"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.IdValuePair.Value">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.IdValuePair.Value"/> property.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.Show">
            <summary>
            Show the step, opening it at the Home step
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.Show(System.String)">
            <summary>
            Show the step with the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.Show(System.Int32)">
            <summary>
            Show the step at the specified index
            </summary>
            <param name="stepIndex"></param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.NewPropertyObserver">
            <summary>
            Return a new property observer for registering for
            property change notifcations on this object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.State">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.State"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.Steps">
            <summary>
            Gets the value of the <see cref="!:StepData"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.CurrentStep">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.CurrentStep"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.HasCurrentStep">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.HasCurrentStep"/> property.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.SaveCommand">
            <summary>
            Gets the value of the <see cref="P:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.ProcessService.SaveCommand"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.ProcessManagement.PreviousStepCommand">
            <summary>
            Command to show the previous step
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.BindingHelper">
            <summary>
            The BindingHelper class.
            </summary>
        </member>
        <member name="F:MvvmFx.Common.Helpers.BindingHelper._value">
            <summary>
            The _value field.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.BindingHelper.Bind(System.Object)">
            <summary>
            Create the binding.
            </summary>
            <param name="bindingHelperResource">The binding helper to create the binding.</param>
            <returns>The binding created.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.BindingHelper.Bind">
            <summary>
            Create the binding.
            </summary>
            <returns>The binding created.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.BindingHelper.OnPropertyChanged(System.String)">
            <summary>
            On the specified property changing.
            </summary>
            <param name="propertyName">The name of the property changing.</param>
        </member>
        <member name="E:MvvmFx.Common.Helpers.BindingHelper.PropertyChanged">
            <summary>
            The property changed handler.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Helpers.BindingHelper.Value">
            <summary>
            Gets or sets the value of the <see cref="P:MvvmFx.Common.Helpers.BindingHelper.Value"/> property.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRulesManager">
            <summary>
            Maintains rule methods for a business object
            or business object type.
            </summary>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Validation.ValidationRulesManager.AddDependentProperty(System.String,System.String)">
            <summary>
            Adds a property to the list of dependencies for
            the specified property
            </summary>
            <param name="propertyName">
            The name of the property.
            </param>
            <param name="dependentPropertyName">
            The name of the dependent property.
            </param>
            <remarks>
            When rules are checked for propertyName, they will
            also be checked for any dependent properties associated
            with that property.
            </remarks>
        </member>
        <member name="T:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1">
            <summary>
            Monitors the PropertyChanged event of an object that implements INotifyPropertyChanged,
            and executes callback methods (i.e. handlers) registered for properties of that object.
            </summary>
            <typeparam name="TPropertySource">The type of object to monitor for property changes.</typeparam>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1.#ctor(`0)">
            <summary>
            Initializes a new instance of PropertyObserver, which
            observes the 'propertySource' object for property changes.
            </summary>
            <param name="propertySource">The object to monitor for property changes.</param>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1.AddHandler(System.String,System.Action{`0})">
            <summary>
            Registers a callback to be invoked when the PropertyChanged event has been raised for the specified property.
            </summary>
            <param name="propertyName">The name of the property to observer.</param>
            <param name="handler">The callback to invoke when the property has changed.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1.AddHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{`0})">
            <summary>
            Registers a callback to be invoked when the PropertyChanged event has been raised for the specified property.
            </summary>
            <param name="expression">A lambda expression like 'n => n.PropertyName'.</param>
            <param name="handler">The callback to invoke when the property has changed.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1.RemoveHandler(System.String)">
            <summary>
            Removes the callback associated with the specified property.
            </summary>
            <param name="propertyName">The name of the property to remove change notifications from.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="M:MvvmFx.Common.ViewModels.Behaviors.Observable.PropertyObserver`1.RemoveHandler(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Removes the callback associated with the specified property.
            </summary>
            <param name="propertyName">A lambda expression like 'n => n.PropertyName'.</param>
            <returns>The object on which this method was invoked, to allow for multiple invocations chained together.</returns>
        </member>
        <member name="T:MvvmFx.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.ArgumentNullException">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.ArgumentOutOfRangeException">
            <summary>
              Looks up a localized string similar to Argument {0} is out of range..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.IndexOutOfRangeException">
            <summary>
              Looks up a localized string similar to Index {0} is out of bounds..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.InvalidRuleMethodException">
            <summary>
              Looks up a localized string similar to Invalid rule method (instance methods of the target object not allowed).
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.KeyAlreadyExistsException">
            <summary>
              Looks up a localized string similar to An element with the same key already exists in the Dictionary..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.MaxValueRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1}.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.MinValueRule">
            <summary>
              Looks up a localized string similar to {0} can not be less than {1}.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.NotImplementedException">
            <summary>
              Looks up a localized string similar to {0} is not currently implemented..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.NullReferenceException">
            <summary>
              Looks up a localized string similar to The field &apos;{0}&apos; is being used without being initialized..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.RegExMatchRule">
            <summary>
              Looks up a localized string similar to {0} does not match regular expression.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.StringMaxLengthRule">
            <summary>
              Looks up a localized string similar to {0} can not exceed {1} characters.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.StringMinLengthRule">
            <summary>
              Looks up a localized string similar to {0} must be at least {1} characters.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.StringRequiredRule">
            <summary>
              Looks up a localized string similar to {0} required.
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.TypeMismatchException">
            <summary>
              Looks up a localized string similar to Object of type {0} compared with type {1}..
            </summary>
        </member>
        <member name="P:MvvmFx.Common.Properties.Resources.ValidationRulesException">
            <summary>
              Looks up a localized string similar to Validation rule {1} failed in property {0}.
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.XDocumentHelper">
            <summary>
            Static helper class for common XDocument functionality
            </summary>
        </member>
        <member name="T:MvvmFx.Common.Helpers.ValidationHelper">
            <summary>
            Static helper class for validation functions
            </summary>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ValidationHelper.IsArgumentNull(System.Boolean,System.Object,System.String)">
            <summary>
            Tests if an object argument is null.
            </summary>
            <param name="throwException">Method trhows ArgumentNullException if this is true and the object is null.</param>
            <param name="obj">The object to test for nullity.</param>
            <param name="objName">The name of the object to test for nullity, used in the exception string if thrown.</param>
            <returns>True if the argument is null otherwise false.</returns>
        </member>
        <member name="M:MvvmFx.Common.Helpers.ValidationHelper.IsIndexInRange(System.Boolean,System.Collections.IList,System.Int32)">
            <summary>
            Validates the value of an index in the context of an <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="throwException">If true, a <see cref="T:System.IndexOutOfRangeException"/> is thrown, otherwise
            the result of the validation is returned as a <see cref="T:System.Boolean"/> value.</param>
            <param name="obj">The <see cref="T:System.Collections.IList"/>.</param>
            <param name="index">The index to validate.</param>
            <returns>If <paramref name="throwException"/> is false, the method will return etiher
            true or false, based on the validity of the value given by <paramref name="index"/>.</returns>
        </member>
    </members>
</doc>
