id: boolean_operators
title: How to use boolean operators
description: >-
  This tutorial will give you a quick walkthrough of the basic boolean operators available
  in the Bio-Model Analyzer. 
  It will take around 10 minutes, and by the end of this you should know how to successfully
  use AND, OR, NOT, IMPLIES
steps:
    - text: >-
        In order to practice using the operators, you need to import a model into the tool.
        For the purpose of this tutorial, you will be using the simple model 'toymodelstable' 
        that can be downloaded from the link below. This model consists of a cell, containing 
        three proteins each ranging from 0 to 4.

      model: toymodelstable.json

    - text: >-
        To start off with, we will be creating two states, that we can input into the boolean 
        operators and examine the results. Open the Linear Temporal Logic tab from the right 
        hand side and click on the upper plus sign. From here create two states, A and B. A is 
        protein a = 1, and B is protein b = 1. As you can see, states do not have to be 
        bound to a specific value, inequalties can be used to make comparisons. 

      img: states_ab.png

    - text: >-
        We want to see an instance where both A and B are equal to 1. This can be done using 
        the AND operator. AND takes two states (expressions) and returns cases where both 
        states equal the defined value at the same time. In this case, there are traces where this 
        is true and false (indicated by green/red stripes). To examine the true cases, 
        click open and then click examples with a green tick.  

    - text: >- 
        The OR operator works similar to AND, however it doesn't require both states to be true 
        at the same time. Here's a task for you to try out, run a query that returns cases of protein 
        a or c being equal to a value of 4. Again, this should return some cases being true, and 
        some being false.

      img: a_or_b.png

    - text: >- 
        The NOT operator allows you to test for all instances except those that satisfy the 
        condition. This operator is normally used when the expression is better described in a 
        negative way. A nice example can be seen in the Ecoli model, you can visit that tutorial now
        to start from scratch or carry on here. 

    - text: >-
        Download and import the model for ecoli now, using the link below. In this model we are 
        interested in showing that the motor always returns to its unbiased state. Rather than 
        checking each case, we can easily reverse the idea and test to see if there are any cases 
        when it doesn't return to an unbiased state. 

      model: ecoli2.json

    - text: >-
        This can easily be achieved by creating a state A, that defines the motor = 1, and plugging it 
        into a NOT operator. Finally, we drag the entire query into an ALWAYS operator. When we run 
        this query it turns red hence indicating that there are no instances where this is true, and 
        that all simultations eventually satisfy A. 

      img: run_alwaysnota.png 

    - text: >-
        The last operator that will be explained in this tutorial is the IMPLIES operator.
        This operator can be used when we want to check if a state is a subsequent of another defined 
        state. For example, using the same 'toymodelstable' model we can check if A implies B.

    - text: >-
        Running this test should return true for all cases, and essentialy means that for every trace
        of A being 1, B is also 1. 

    - text: >-
        This is the end of the 'How to use Boolean operators' tutorial, you should now be comfortable using 
        and experimenting with operators; AND, OR, NOT and IMPLIES