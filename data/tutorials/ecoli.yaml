id: ecoli
title: Ecoli
description: >-
  This tutorial will look at the habituation of the chemosensing system in bacteria in response   
  to a constant environment, and will query if the motor in the model returns to an unbiased
  state.
  It takes around 10 minutes.
steps:
    - text: >-
        We will be using the ecoli model throughout this tutorial, please import the JSON into 
        BMA or follow the link below. 

      model: ecoli1.json
    
    - text: >-
        We will start by defining model states. Open the LTL interface from the right hand
        side and click the plus sign under 'Linear Temporal Logic'.

      image: open_ltl_interface.png

    - text: >-
        This will open the LTL state editor. Here you need to select the motor variable from
        the canvas and assign a value of 1, this can be seen in the image below.

      image: define_model_state.png

    - text: >-
        Now return to the LTL interface, notice a new state has been defined as 'A', this is
        the one we just created. Now click on the bottom '+' sign to define a new
        temporal property.

    - text: >-
        We are interested in showing that the motor in the model always returns to the unbiased 
        state. We can do this with our existing state by dragging a “not” operator to the canvas,
        dragging “A” from the always operator into the “not” operator, and finally by dragging 
        the whole query into the always socket.

      image: always_not_a.png

    - text: >-
        Once your LTL query has been prepared on the canvas, click on the 'Test' button. This should
        result in the query going red, indicating that there are no traces where this is true, 
        and suggesting that all simulations eventually satisfy A. 

      image: run_alwaysnota.png

    - text: >-
        Finally, we will test the endpoints of the model. We can start by using the eventually 
        operator which confirms the previous result; all traces eventually result in A being satisfied
        at some point. This is shown graphically by the query turning green. 

      image: run_eventuallya.png

    - text: >-
        However, we are interested specifically if all simulations end in a self loop where A is true, 
        or a loop where A is true. To test this we can nest an “and” operator within eventually and 
        select both self loops and oscillations in the different sockets.

    - text: >-
        To speed this up, we can create one “Eventually ( (A) and ( ) )” query, and the left click and 
        copy. Then have one as 'eventually A and (self loops)'' and the other as 'eventually A and 
        (oscillations)

      image: copying_query.png

    - text: >-
        Testing for self loop and oscillations reveals that all traces of length 10 end in a self loop 
        where A is true. 

      image: ecoli_result.png

    - text: >-
        This is the end of this tutorial. You should have now successfuly learnt how to test the state
        of a model using the loop and oscillation functions. 

