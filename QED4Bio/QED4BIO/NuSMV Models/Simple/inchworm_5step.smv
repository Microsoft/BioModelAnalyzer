MODULE main

VAR
	t   : timer;
	c   : clock (t.reset);
	Front : wormend(t.var1); 
	BacK  : wormend(t.var2);

-----------

MODULE timer

VAR
	var1  : boolean;
	var2  : boolean;
	step  : 0..9;
	state1 : {waiting, running, exhausted};
	state2 : {waiting, running, exhausted};
	reset : boolean;
ASSIGN
	init(var1) := FALSE;
	next(var1) :=
		case
			state1 = running : TRUE;
			state1 != running: FALSE;
			TRUE: var1;
		esac;
	init(var2) := FALSE;
	next(var2) := 
		case
			state2 = running : TRUE;
			state2 != running: FALSE;
			TRUE: var2;
		esac;
	init(reset) := FALSE;
	next(reset) := 
		case
			state1 = exhausted & state2 = exhausted : TRUE;
			!(state1 = exhausted & state2 = exhausted) : FALSE;
			TRUE: reset;
		esac;
	init(step) := 9;
	next(step) := 
		case
			(state1 = running | state2 = running) & step > 0: step -1;
			step = 0 : 9;
			TRUE: step;
		esac;
	init(state1) := waiting;
	next(state1) := 
		case
			state1 = exhausted & ! reset : exhausted;
			state1 = exhausted & reset : waiting;
			state1 = waiting & state2 != running: {running, waiting};
			state1 = waiting & state2 = running : waiting;
			state1 = running & step = 0 : exhausted; 
			TRUE: state1;
		esac;
	init(state2) := waiting;
	next(state2) := 
		case
			state2 = exhausted & ! reset : exhausted;
			state2 = exhausted & reset : waiting;
			state2 = waiting & state1 != running: {running,waiting};
			state2 = waiting & state1 = running : waiting;
			state2 = running & step = 0 : exhausted; 
			TRUE: state2;
		esac;


----------

MODULE clock (reset)

VAR
	time:0..15;	
ASSIGN
	init(time) := 0;
	next(time) := 
		   case
			reset & (time < 15) : time+1;
			TRUE : time;
		   esac;

----------

MODULE wormend (go)

VAR
	position:0..50;
ASSIGN
	init(position) := 0;
	next(position) := 
		case	
			go & position < 50 : position+1; 
			TRUE : position;
		esac;	






