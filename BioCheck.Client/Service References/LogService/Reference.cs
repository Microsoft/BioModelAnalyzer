//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace BioCheck.LogService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableServiceEntity", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.StorageClient")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(BioCheck.LogService.UsuageDataModel))]
    public partial class TableServiceEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string PartitionKeyField;
        
        private string RowKeyField;
        
        private System.DateTime TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartitionKey {
            get {
                return this.PartitionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PartitionKeyField, value) != true)) {
                    this.PartitionKeyField = value;
                    this.RaisePropertyChanged("PartitionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowKey {
            get {
                return this.RowKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RowKeyField, value) != true)) {
                    this.RowKeyField = value;
                    this.RaisePropertyChanged("RowKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsuageDataModel", Namespace="http://schemas.datacontract.org/2004/07/BioCheck.Web.Log")]
    public partial class UsuageDataModel : BioCheck.LogService.TableServiceEntity {
        
        private int DurationField;
        
        private int FurtherTestingField;
        
        private int ImportModelField;
        
        private System.DateTime LogInTimeField;
        
        private System.DateTime LogOutTimeField;
        
        private int NewModelField;
        
        private int RunProofField;
        
        private int RunSimulationField;
        
        private int SaveModelField;
        
        private string UserIdField;
        
        private string VersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FurtherTesting {
            get {
                return this.FurtherTestingField;
            }
            set {
                if ((this.FurtherTestingField.Equals(value) != true)) {
                    this.FurtherTestingField = value;
                    this.RaisePropertyChanged("FurtherTesting");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImportModel {
            get {
                return this.ImportModelField;
            }
            set {
                if ((this.ImportModelField.Equals(value) != true)) {
                    this.ImportModelField = value;
                    this.RaisePropertyChanged("ImportModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogInTime {
            get {
                return this.LogInTimeField;
            }
            set {
                if ((this.LogInTimeField.Equals(value) != true)) {
                    this.LogInTimeField = value;
                    this.RaisePropertyChanged("LogInTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LogOutTime {
            get {
                return this.LogOutTimeField;
            }
            set {
                if ((this.LogOutTimeField.Equals(value) != true)) {
                    this.LogOutTimeField = value;
                    this.RaisePropertyChanged("LogOutTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NewModel {
            get {
                return this.NewModelField;
            }
            set {
                if ((this.NewModelField.Equals(value) != true)) {
                    this.NewModelField = value;
                    this.RaisePropertyChanged("NewModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RunProof {
            get {
                return this.RunProofField;
            }
            set {
                if ((this.RunProofField.Equals(value) != true)) {
                    this.RunProofField = value;
                    this.RaisePropertyChanged("RunProof");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RunSimulation {
            get {
                return this.RunSimulationField;
            }
            set {
                if ((this.RunSimulationField.Equals(value) != true)) {
                    this.RunSimulationField = value;
                    this.RaisePropertyChanged("RunSimulation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SaveModel {
            get {
                return this.SaveModelField;
            }
            set {
                if ((this.SaveModelField.Equals(value) != true)) {
                    this.SaveModelField = value;
                    this.RaisePropertyChanged("SaveModel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="LogService.LogService")]
    public interface LogService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LogService/LogIn", ReplyAction="urn:LogService/LogInResponse")]
        System.IAsyncResult BeginLogIn(string userId, string version, System.AsyncCallback callback, object asyncState);
        
        BioCheck.LogService.UsuageDataModel EndLogIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LogService/Update", ReplyAction="urn:LogService/UpdateResponse")]
        System.IAsyncResult BeginUpdate(BioCheck.LogService.UsuageDataModel logDM, System.AsyncCallback callback, object asyncState);
        
        void EndUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:LogService/Error", ReplyAction="urn:LogService/ErrorResponse")]
        System.IAsyncResult BeginError(string userId, string version, string message, string details, System.AsyncCallback callback, object asyncState);
        
        void EndError(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface LogServiceChannel : BioCheck.LogService.LogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LogInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BioCheck.LogService.UsuageDataModel Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BioCheck.LogService.UsuageDataModel)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogServiceClient : System.ServiceModel.ClientBase<BioCheck.LogService.LogService>, BioCheck.LogService.LogService {
        
        private BeginOperationDelegate onBeginLogInDelegate;
        
        private EndOperationDelegate onEndLogInDelegate;
        
        private System.Threading.SendOrPostCallback onLogInCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateDelegate;
        
        private EndOperationDelegate onEndUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginErrorDelegate;
        
        private EndOperationDelegate onEndErrorDelegate;
        
        private System.Threading.SendOrPostCallback onErrorCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public LogServiceClient() {
        }
        
        public LogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<LogInCompletedEventArgs> LogInCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ErrorCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.LogService.LogService.BeginLogIn(string userId, string version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogIn(userId, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BioCheck.LogService.UsuageDataModel BioCheck.LogService.LogService.EndLogIn(System.IAsyncResult result) {
            return base.Channel.EndLogIn(result);
        }
        
        private System.IAsyncResult OnBeginLogIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string version = ((string)(inValues[1]));
            return ((BioCheck.LogService.LogService)(this)).BeginLogIn(userId, version, callback, asyncState);
        }
        
        private object[] OnEndLogIn(System.IAsyncResult result) {
            BioCheck.LogService.UsuageDataModel retVal = ((BioCheck.LogService.LogService)(this)).EndLogIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLogInCompleted(object state) {
            if ((this.LogInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogInCompleted(this, new LogInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogInAsync(string userId, string version) {
            this.LogInAsync(userId, version, null);
        }
        
        public void LogInAsync(string userId, string version, object userState) {
            if ((this.onBeginLogInDelegate == null)) {
                this.onBeginLogInDelegate = new BeginOperationDelegate(this.OnBeginLogIn);
            }
            if ((this.onEndLogInDelegate == null)) {
                this.onEndLogInDelegate = new EndOperationDelegate(this.OnEndLogIn);
            }
            if ((this.onLogInCompletedDelegate == null)) {
                this.onLogInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogInCompleted);
            }
            base.InvokeAsync(this.onBeginLogInDelegate, new object[] {
                        userId,
                        version}, this.onEndLogInDelegate, this.onLogInCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.LogService.LogService.BeginUpdate(BioCheck.LogService.UsuageDataModel logDM, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdate(logDM, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void BioCheck.LogService.LogService.EndUpdate(System.IAsyncResult result) {
            base.Channel.EndUpdate(result);
        }
        
        private System.IAsyncResult OnBeginUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BioCheck.LogService.UsuageDataModel logDM = ((BioCheck.LogService.UsuageDataModel)(inValues[0]));
            return ((BioCheck.LogService.LogService)(this)).BeginUpdate(logDM, callback, asyncState);
        }
        
        private object[] OnEndUpdate(System.IAsyncResult result) {
            ((BioCheck.LogService.LogService)(this)).EndUpdate(result);
            return null;
        }
        
        private void OnUpdateCompleted(object state) {
            if ((this.UpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAsync(BioCheck.LogService.UsuageDataModel logDM) {
            this.UpdateAsync(logDM, null);
        }
        
        public void UpdateAsync(BioCheck.LogService.UsuageDataModel logDM, object userState) {
            if ((this.onBeginUpdateDelegate == null)) {
                this.onBeginUpdateDelegate = new BeginOperationDelegate(this.OnBeginUpdate);
            }
            if ((this.onEndUpdateDelegate == null)) {
                this.onEndUpdateDelegate = new EndOperationDelegate(this.OnEndUpdate);
            }
            if ((this.onUpdateCompletedDelegate == null)) {
                this.onUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateDelegate, new object[] {
                        logDM}, this.onEndUpdateDelegate, this.onUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BioCheck.LogService.LogService.BeginError(string userId, string version, string message, string details, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginError(userId, version, message, details, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void BioCheck.LogService.LogService.EndError(System.IAsyncResult result) {
            base.Channel.EndError(result);
        }
        
        private System.IAsyncResult OnBeginError(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string version = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            string details = ((string)(inValues[3]));
            return ((BioCheck.LogService.LogService)(this)).BeginError(userId, version, message, details, callback, asyncState);
        }
        
        private object[] OnEndError(System.IAsyncResult result) {
            ((BioCheck.LogService.LogService)(this)).EndError(result);
            return null;
        }
        
        private void OnErrorCompleted(object state) {
            if ((this.ErrorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ErrorAsync(string userId, string version, string message, string details) {
            this.ErrorAsync(userId, version, message, details, null);
        }
        
        public void ErrorAsync(string userId, string version, string message, string details, object userState) {
            if ((this.onBeginErrorDelegate == null)) {
                this.onBeginErrorDelegate = new BeginOperationDelegate(this.OnBeginError);
            }
            if ((this.onEndErrorDelegate == null)) {
                this.onEndErrorDelegate = new EndOperationDelegate(this.OnEndError);
            }
            if ((this.onErrorCompletedDelegate == null)) {
                this.onErrorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnErrorCompleted);
            }
            base.InvokeAsync(this.onBeginErrorDelegate, new object[] {
                        userId,
                        version,
                        message,
                        details}, this.onEndErrorDelegate, this.onErrorCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BioCheck.LogService.LogService CreateChannel() {
            return new LogServiceClientChannel(this);
        }
        
        private class LogServiceClientChannel : ChannelBase<BioCheck.LogService.LogService>, BioCheck.LogService.LogService {
            
            public LogServiceClientChannel(System.ServiceModel.ClientBase<BioCheck.LogService.LogService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLogIn(string userId, string version, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = version;
                System.IAsyncResult _result = base.BeginInvoke("LogIn", _args, callback, asyncState);
                return _result;
            }
            
            public BioCheck.LogService.UsuageDataModel EndLogIn(System.IAsyncResult result) {
                object[] _args = new object[0];
                BioCheck.LogService.UsuageDataModel _result = ((BioCheck.LogService.UsuageDataModel)(base.EndInvoke("LogIn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdate(BioCheck.LogService.UsuageDataModel logDM, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = logDM;
                System.IAsyncResult _result = base.BeginInvoke("Update", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Update", _args, result);
            }
            
            public System.IAsyncResult BeginError(string userId, string version, string message, string details, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = version;
                _args[2] = message;
                _args[3] = details;
                System.IAsyncResult _result = base.BeginInvoke("Error", _args, callback, asyncState);
                return _result;
            }
            
            public void EndError(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Error", _args, result);
            }
        }
    }
}
