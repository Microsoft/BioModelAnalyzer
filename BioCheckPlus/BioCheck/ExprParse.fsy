// Expr{Parse,Lex} generated by
//$ /cygdrive/c/Program\ Files/FSharpPowerPack-2.0.0.0/bin/fslex.exe --unicode ExprLex.fsl &&
//  /cygdrive/c/Program\ Files/FSharpPowerPack-2.0.0.0/bin/fsyacc.exe --module ExprParse ExprParse.fsy

%{

open Expr

%}

%token <int> NUM
%token EOF
%token COMMA LPAREN RPAREN
%token DIV MINUS PLUS TIMES
%token AVG CEIL FLOOR MAX MIN VAR

%start func
%type <expr> func

%left	PLUS MINUS
%left	TIMES DIV
%left   COMMA	

%%

func : expr EOF { $1 }

expr  : NUM                   { Const($1) }
      | VAR LPAREN NUM RPAREN { Var($3) }
      | expr PLUS expr        { Plus($1,$3) }
      | expr MINUS expr       { Minus($1,$3) }
      | expr TIMES expr       { Times($1,$3) }
      | expr DIV expr         { Div($1,$3) }
      | MAX LPAREN expr COMMA expr RPAREN { Max($3,$5) }
      | MIN LPAREN expr COMMA expr RPAREN { Min($3,$5) }
      | CEIL LPAREN expr RPAREN  { Ceil($3) }
      | FLOOR LPAREN expr RPAREN { Floor($3) }
      | AVG LPAREN expr_list RPAREN { Ave($3) }
      | LPAREN expr RPAREN { $2 }
      ;

expr_list : expr { [$1] }
          | expr_list COMMA expr { $3::$1 }
		  ;


