// Implementation file for parser generated by fsyacc
module ExprParse
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 5 "ExprParse.fsy"


open Expr

type err = 
  | MissingClosedParen of string
  | MissingOpenParen of string

exception ParseError of err


# 18 "ExprParse.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | AVG
  | CEIL
  | FLOOR
  | MAX
  | MIN
  | VAR
  | DIV
  | MINUS
  | PLUS
  | TIMES
  | POS
  | NEG
  | COMMA
  | LPAREN
  | RPAREN
  | EOF
  | IDENT of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_AVG
    | TOKEN_CEIL
    | TOKEN_FLOOR
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_VAR
    | TOKEN_DIV
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_TIMES
    | TOKEN_POS
    | TOKEN_NEG
    | TOKEN_COMMA
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_EOF
    | TOKEN_IDENT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startfunc
    | NONTERM_func
    | NONTERM_expr
    | NONTERM_expr_list

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | AVG  -> 0 
  | CEIL  -> 1 
  | FLOOR  -> 2 
  | MAX  -> 3 
  | MIN  -> 4 
  | VAR  -> 5 
  | DIV  -> 6 
  | MINUS  -> 7 
  | PLUS  -> 8 
  | TIMES  -> 9 
  | POS  -> 10 
  | NEG  -> 11 
  | COMMA  -> 12 
  | LPAREN  -> 13 
  | RPAREN  -> 14 
  | EOF  -> 15 
  | IDENT _ -> 16 
  | NUM _ -> 17 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_AVG 
  | 1 -> TOKEN_CEIL 
  | 2 -> TOKEN_FLOOR 
  | 3 -> TOKEN_MAX 
  | 4 -> TOKEN_MIN 
  | 5 -> TOKEN_VAR 
  | 6 -> TOKEN_DIV 
  | 7 -> TOKEN_MINUS 
  | 8 -> TOKEN_PLUS 
  | 9 -> TOKEN_TIMES 
  | 10 -> TOKEN_POS 
  | 11 -> TOKEN_NEG 
  | 12 -> TOKEN_COMMA 
  | 13 -> TOKEN_LPAREN 
  | 14 -> TOKEN_RPAREN 
  | 15 -> TOKEN_EOF 
  | 16 -> TOKEN_IDENT 
  | 17 -> TOKEN_NUM 
  | 20 -> TOKEN_end_of_input
  | 18 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startfunc 
    | 1 -> NONTERM_func 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_expr 
    | 5 -> NONTERM_expr 
    | 6 -> NONTERM_expr 
    | 7 -> NONTERM_expr 
    | 8 -> NONTERM_expr 
    | 9 -> NONTERM_expr 
    | 10 -> NONTERM_expr 
    | 11 -> NONTERM_expr 
    | 12 -> NONTERM_expr 
    | 13 -> NONTERM_expr 
    | 14 -> NONTERM_expr 
    | 15 -> NONTERM_expr 
    | 16 -> NONTERM_expr 
    | 17 -> NONTERM_expr 
    | 18 -> NONTERM_expr 
    | 19 -> NONTERM_expr_list 
    | 20 -> NONTERM_expr_list 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 20 
let _fsyacc_tagOfErrorTerminal = 18

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | AVG  -> "AVG" 
  | CEIL  -> "CEIL" 
  | FLOOR  -> "FLOOR" 
  | MAX  -> "MAX" 
  | MIN  -> "MIN" 
  | VAR  -> "VAR" 
  | DIV  -> "DIV" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | TIMES  -> "TIMES" 
  | POS  -> "POS" 
  | NEG  -> "NEG" 
  | COMMA  -> "COMMA" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | EOF  -> "EOF" 
  | IDENT _ -> "IDENT" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | AVG  -> (null : System.Object) 
  | CEIL  -> (null : System.Object) 
  | FLOOR  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | POS  -> (null : System.Object) 
  | NEG  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 16us; 65535us; 0us; 2us; 26us; 11us; 27us; 12us; 28us; 13us; 29us; 14us; 31us; 15us; 32us; 16us; 34us; 17us; 35us; 18us; 39us; 19us; 40us; 20us; 43us; 21us; 46us; 22us; 49us; 24us; 52us; 23us; 55us; 25us; 1us; 65535us; 49us; 50us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 20us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 1us; 6us; 7us; 8us; 9us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 5us; 6us; 6us; 7us; 8us; 9us; 5us; 6us; 7us; 7us; 8us; 9us; 5us; 6us; 7us; 8us; 8us; 9us; 5us; 6us; 7us; 8us; 9us; 9us; 6us; 6us; 7us; 8us; 9us; 10us; 12us; 6us; 6us; 7us; 8us; 9us; 10us; 12us; 5us; 6us; 7us; 8us; 9us; 11us; 5us; 6us; 7us; 8us; 9us; 11us; 5us; 6us; 7us; 8us; 9us; 13us; 5us; 6us; 7us; 8us; 9us; 13us; 5us; 6us; 7us; 8us; 9us; 14us; 5us; 6us; 7us; 8us; 9us; 15us; 6us; 6us; 7us; 8us; 9us; 17us; 18us; 5us; 6us; 7us; 8us; 9us; 19us; 5us; 6us; 7us; 8us; 9us; 20us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 3us; 10us; 11us; 12us; 2us; 10us; 12us; 2us; 10us; 12us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 2us; 16us; 20us; 1us; 16us; 2us; 17us; 18us; 1us; 17us; 1us; 18us; 1us; 20us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 32us; 38us; 44us; 50us; 57us; 64us; 70us; 76us; 82us; 88us; 94us; 100us; 107us; 113us; 119us; 121us; 123us; 125us; 127us; 131us; 134us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 174us; 176us; 179us; 181us; 183us; |]
let _fsyacc_action_rows = 56
let _fsyacc_actionTableElements = [|10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 49152us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 15us; 3us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 13us; 6us; 1us; 32768us; 16us; 7us; 1us; 32768us; 14us; 8us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 2us; 16390us; 6us; 29us; 9us; 28us; 2us; 16391us; 6us; 29us; 9us; 28us; 0us; 16392us; 0us; 16393us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 12us; 32us; 6us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 33us; 18us; 37us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 12us; 35us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 36us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 12us; 40us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 41us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 44us; 5us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 47us; 6us; 32768us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 14us; 53us; 18us; 54us; 4us; 16403us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 4us; 16404us; 6us; 29us; 7us; 27us; 8us; 26us; 9us; 28us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 2us; 32768us; 13us; 31us; 18us; 34us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16394us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 13us; 39us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16397us; 1us; 32768us; 13us; 43us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16398us; 1us; 32768us; 13us; 46us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16399us; 1us; 32768us; 13us; 49us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 2us; 32768us; 12us; 55us; 14us; 51us; 0us; 16400us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; 0us; 16401us; 0us; 16402us; 10us; 32768us; 0us; 48us; 1us; 42us; 2us; 45us; 3us; 30us; 4us; 38us; 5us; 5us; 10us; 9us; 11us; 10us; 13us; 52us; 17us; 4us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 11us; 12us; 18us; 19us; 20us; 22us; 24us; 26us; 27us; 28us; 29us; 32us; 35us; 36us; 37us; 43us; 50us; 56us; 62us; 68us; 74us; 80us; 86us; 93us; 98us; 103us; 114us; 125us; 136us; 147us; 150us; 161us; 172us; 173us; 184us; 195us; 196us; 197us; 199us; 210us; 221us; 222us; 224us; 235us; 236us; 238us; 249us; 250us; 252us; 263us; 266us; 267us; 278us; 279us; 280us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 4us; 1us; 1us; 3us; 3us; 3us; 3us; 6us; 6us; 6us; 6us; 4us; 4us; 4us; 3us; 3us; 1us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 16396us; 65535us; 65535us; 65535us; 16397us; 65535us; 65535us; 16398us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 16400us; 65535us; 16401us; 16402us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 198 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startfunc));
# 207 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "ExprParse.fsy"
                                       _1 
                   )
# 34 "ExprParse.fsy"
                 : expr));
# 218 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "ExprParse.fsy"
                                                       Const(_1) 
                   )
# 36 "ExprParse.fsy"
                 : 'expr));
# 229 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "ExprParse.fsy"
                                                       Ident(_3) 
                   )
# 37 "ExprParse.fsy"
                 : 'expr));
# 240 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "ExprParse.fsy"
                                                    Pos 
                   )
# 38 "ExprParse.fsy"
                 : 'expr));
# 250 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "ExprParse.fsy"
                                                    Neg 
                   )
# 39 "ExprParse.fsy"
                 : 'expr));
# 260 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "ExprParse.fsy"
                                                       Plus(_1,_3) 
                   )
# 40 "ExprParse.fsy"
                 : 'expr));
# 272 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "ExprParse.fsy"
                                                       Minus(_1,_3) 
                   )
# 41 "ExprParse.fsy"
                 : 'expr));
# 284 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "ExprParse.fsy"
                                                       Times(_1,_3) 
                   )
# 42 "ExprParse.fsy"
                 : 'expr));
# 296 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "ExprParse.fsy"
                                                       Div(_1,_3) 
                   )
# 43 "ExprParse.fsy"
                 : 'expr));
# 308 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "ExprParse.fsy"
                                                                 Max(_3,_5) 
                   )
# 44 "ExprParse.fsy"
                 : 'expr));
# 320 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "ExprParse.fsy"
                                                              raise (ParseError(MissingOpenParen("after max"))) 
                   )
# 45 "ExprParse.fsy"
                 : 'expr));
# 332 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "ExprParse.fsy"
                                                              raise (ParseError(MissingClosedParen("after max"))) 
                   )
# 46 "ExprParse.fsy"
                 : 'expr));
# 344 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "ExprParse.fsy"
                                                                 Min(_3,_5) 
                   )
# 47 "ExprParse.fsy"
                 : 'expr));
# 356 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "ExprParse.fsy"
                                                        Ceil(_3) 
                   )
# 48 "ExprParse.fsy"
                 : 'expr));
# 367 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ExprParse.fsy"
                                                        Floor(_3) 
                   )
# 49 "ExprParse.fsy"
                 : 'expr));
# 378 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "ExprParse.fsy"
                                                           Ave(_3) 
                   )
# 50 "ExprParse.fsy"
                 : 'expr));
# 389 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "ExprParse.fsy"
                                                  _2 
                   )
# 51 "ExprParse.fsy"
                 : 'expr));
# 400 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ExprParse.fsy"
                                              raise (ParseError(MissingClosedParen("after an expr"))) 
                   )
# 52 "ExprParse.fsy"
                 : 'expr));
# 411 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "ExprParse.fsy"
                                        [_1] 
                   )
# 55 "ExprParse.fsy"
                 : 'expr_list));
# 422 "ExprParse.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "ExprParse.fsy"
                                                        _3::_1 
                   )
# 56 "ExprParse.fsy"
                 : 'expr_list));
|]
# 435 "ExprParse.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 21;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let func lexer lexbuf : expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
