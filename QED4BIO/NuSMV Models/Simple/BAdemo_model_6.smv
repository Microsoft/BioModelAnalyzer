MODULE main

VAR
	t   : timer(0);
	p1  : cell(t.var1,0,0,p2.path); 
	p2  : cell(t.var2,0,p1.path,p3.path);
	p3  : cell(t.var3,0,p2.path,p4.path);
	p4  : cell(t.var4,0,p3.path,p5.path);
	p5  : cell(t.var5,0,p4.path,p6.path);
	p6  : cell(t.var6,0,p5.path,0);

-----------

MODULE timer(bound)

VAR
	var1  : boolean;
	var2  : boolean;
	var3  : boolean;
	var4  : boolean;
	var5  : boolean;
	var6  : boolean;
	step  : 0..50;
	state1 : {waiting, running, exhausted};
	state2 : {waiting, running, exhausted};
	state3 : {waiting, running, exhausted};
	state4 : {waiting, running, exhausted};
	state5 : {waiting, running, exhausted};
	state6 : {waiting, running, exhausted};
	reset : boolean;
ASSIGN
	init(var1) := FALSE;
	next(var1) :=
		case
			state1 = running : TRUE;
			state1 != running: FALSE;
			TRUE: var1;
		esac;
	init(var2) := FALSE;
	next(var2) := 
		case
			state2 = running : TRUE;
			state2 != running: FALSE;
			TRUE: var2;
		esac;
	init(var3) := FALSE;
	next(var3) :=
		case
			state3 = running:TRUE;
			state3 !=running: FALSE;
			TRUE: var3;
		esac;
	init(var4) := FALSE;
	next(var4) :=
		case
			state4 = running : TRUE;
			state4 != running: FALSE;
			TRUE: var4;
		esac;
	init(var5) := FALSE;
	next(var5) :=
		case
			state5 = running : TRUE;
			state5 != running: FALSE;
			TRUE: var5;
		esac;
	init(var6) := FALSE;
	next(var6) :=
		case
			state6 = running : TRUE;
			state6 != running: FALSE;
			TRUE: var6;
		esac;
	init(reset) := FALSE;
	next(reset) := 
		case
			state1 = exhausted & state2 = exhausted & state3=exhausted & state4=exhausted & state5 = exhausted & state6 = exhausted: TRUE;
			!(state1 = exhausted & state2 = exhausted & state3=exhausted & state4=exhausted & state5=exhausted & state6=exhausted) : FALSE;
			TRUE: reset;
		esac;
	init(step) := bound;
	next(step) := 
		case
			(state1 = running | state2 = running | state3 =running | state4 = running|state5=running|state6=running) & step > 0: step -1;
			step = 0 : bound;
			TRUE: step;
		esac;
	init(state1) := waiting;
	next(state1) := 
		case
			state1 = exhausted & ! reset : exhausted;
			state1 = exhausted & reset : waiting;
			state1 = waiting & (state2 != running & state3 != running & state4 != running & state5 != running & state6!=running) : {running, waiting};
			state1 = waiting & (state2 = running | state3 = running | state4 = running | state5=running | state6=running) : waiting;
			state1 = running & step = 0 : exhausted; 
			TRUE: state1;
		esac;
	init(state2) := waiting;
	next(state2) := 
		case
			state2 = exhausted & ! reset : exhausted;
			state2 = exhausted & reset : waiting;
			state2 = waiting & (state1 != running & state3 != running & state4 != running & state5!=running & state6!=running) : {running,waiting};
			state2 = waiting & (state1 = running | state3 = running | state4=running | state5=running | state6=running) : waiting;
			state2 = running & step = 0 : exhausted; 
			TRUE: state2;
		esac;

	init(state3) := waiting;
	next(state3) := 
		case
			state3 = exhausted & ! reset : exhausted;
			state3 = exhausted & reset : waiting;
			state3 = waiting & (state1 != running & state2 != running & state4!=running&state5!=running&state6!=running): {running,waiting};
			state3 = waiting & (state2 = running | state1 = running|state4=running|state5=running|state6=running) : waiting;
			state3 = running & step = 0 : exhausted; 
			TRUE: state3;
		esac;


	init(state4) := waiting;
	next(state4) := 
		case
			state4 = exhausted & ! reset : exhausted;
			state4 = exhausted & reset : waiting;
			state4 = waiting & (state1 != running & state2 != running & state3!=running&state5!=running&state6!=running): {running,waiting};
			state4 = waiting & (state2 = running | state1 = running|state3=running|state5=running|state6=running) : waiting;
			state4 = running & step = 0 : exhausted; 
			TRUE: state4;
		esac;

	init(state5) := waiting;
	next(state5) := 
		case
			state5 = exhausted & ! reset : exhausted;
			state5 = exhausted & reset : waiting;
			state5 = waiting & (state1 != running & state2 != running & state3!=running&state4!=running&state6!=running): {running,waiting};
			state5 = waiting & (state2 = running | state1 = running|state3=running|state4=running|state6=running) : waiting;
			state5 = running & step = 0 : exhausted; 
			TRUE: state5;
		esac;

	init(state6) := waiting;
	next(state6) := 
		case
			state6 = exhausted & ! reset : exhausted;
			state6 = exhausted & reset : waiting;
			state6 = waiting & (state1 != running & state2 != running & state3!=running&state4!=running&state5!=running): {running,waiting};
			state6 = waiting & (state2 = running | state1 = running|state3=running|state4=running|state5=running) : waiting;
			state6 = running & step = 0 : exhausted; 
			TRUE: state6;
		esac;
----------

MODULE cell (go,input,left,right)

VAR
	path:0..4;
	signal:0..4;
ASSIGN
	init(path) := 1;
	next(path) := 
		case	
			go & path < 4 & path > 0 & input = 0 & next(signal)<4: path+1;
			go & path < 4 & path > 0 & input = 1 & next(signal)<4: 4;
			go & path < 4 & path > 0 & next(signal)=4: 0; 
			TRUE : path;
		esac;	
	init(signal) := 3;
	next(signal) := 
		case
			go & (left=4 | right=4) & signal>0 : 4;
			go & (left<4 & right<4) & path=4: 0;
			go & (left<4 & right<4) & path<4 & signal > 0 & signal < 4 : signal -1;
			TRUE: signal;
		esac;





